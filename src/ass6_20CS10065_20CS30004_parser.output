Terminals unused in grammar

    STRUCT
    TYPEDEF
    UNION
    HASH
    UNKWN


Grammar

    0 $accept: translation_unit $end

    1 marker_M: ε

    2 guard_N: ε

    3 enter_func: ε

    4 create_label: ε

    5 enter_block: ε

    6 primary_expression: IDENTIFIER
    7                   | INTEGER_CONSTANT
    8                   | FLOATING_CONSTANT
    9                   | CHARACTER_CONSTANT
   10                   | STRING_LITERAL
   11                   | LF_PRNTH expression RT_PRNTH

   12 postfix_expression: primary_expression
   13                   | postfix_expression LF_SQBR expression RT_SQBR
   14                   | postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | postfix_expression DOT IDENTIFIER
   16                   | postfix_expression ARROW IDENTIFIER
   17                   | postfix_expression PLUS_PLUS
   18                   | postfix_expression MINUS_MINUS
   19                   | LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE

   21 argument_expression_list_opt: argument_expression_list
   22                             | ε

   23 argument_expression_list: assignment_expression
   24                         | argument_expression_list COMMA assignment_expression

   25 unary_expression: postfix_expression
   26                 | PLUS_PLUS unary_expression
   27                 | MINUS_MINUS unary_expression
   28                 | unary_operator cast_expression
   29                 | SIZEOF unary_expression
   30                 | SIZEOF LF_PRNTH type_name RT_PRNTH

   31 unary_operator: AMPRSND
   32               | ASTERIX
   33               | PLUS
   34               | MINUS
   35               | TILDE
   36               | EXCLAIM

   37 cast_expression: unary_expression
   38                | LF_PRNTH type_name RT_PRNTH cast_expression

   39 multiplicative_expression: cast_expression
   40                          | multiplicative_expression ASTERIX cast_expression
   41                          | multiplicative_expression SLASH cast_expression
   42                          | multiplicative_expression PRCNT cast_expression

   43 additive_expression: multiplicative_expression
   44                    | additive_expression PLUS multiplicative_expression
   45                    | additive_expression MINUS multiplicative_expression

   46 shift_expression: additive_expression
   47                 | shift_expression L_SHFT additive_expression
   48                 | shift_expression R_SHFT additive_expression

   49 relational_expression: shift_expression
   50                      | relational_expression LESS_TH shift_expression
   51                      | relational_expression MORE_TH shift_expression
   52                      | relational_expression LESS_EQ shift_expression
   53                      | relational_expression MORE_EQ shift_expression

   54 equality_expression: relational_expression
   55                    | equality_expression EQ_EQ relational_expression
   56                    | equality_expression NOT_EQ relational_expression

   57 AND_expression: equality_expression
   58               | AND_expression AMPRSND equality_expression

   59 exclusive_OR_expression: AND_expression
   60                        | exclusive_OR_expression CAP AND_expression

   61 inclusive_OR_expression: exclusive_OR_expression
   62                        | inclusive_OR_expression PIPE exclusive_OR_expression

   63 logical_AND_expression: inclusive_OR_expression
   64                       | logical_AND_expression AND_AND marker_M inclusive_OR_expression

   65 logical_OR_expression: logical_AND_expression
   66                      | logical_OR_expression OR_OR marker_M logical_AND_expression

   67 conditional_expression: logical_OR_expression
   68                       | logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression

   69 assignment_expression: conditional_expression
   70                      | unary_expression assignment_operator assignment_expression

   71 assignment_operator: EQ
   72                    | TIMES_EQ
   73                    | SLASH_EQ
   74                    | PRCNT_EQ
   75                    | PLUS_EQ
   76                    | MINUS_EQ
   77                    | LS_EQ
   78                    | RS_EQ
   79                    | AND_EQ
   80                    | XOR_EQ
   81                    | OR_EQ

   82 expression: assignment_expression
   83           | expression COMMA assignment_expression

   84 constant_expression: conditional_expression

   85 declaration: declaration_specifiers init_declarator_list_opt SEMICOLON

   86 init_declarator_list_opt: init_declarator_list
   87                         | ε

   88 declaration_specifiers: storage_class_specifier declaration_specifiers_opt
   89                       | type_specifier declaration_specifiers_opt
   90                       | type_qualifier declaration_specifiers_opt
   91                       | function_specifier declaration_specifiers_opt

   92 declaration_specifiers_opt: declaration_specifiers
   93                           | ε

   94 init_declarator_list: init_declarator
   95                     | init_declarator_list COMMA init_declarator

   96 init_declarator: declarator
   97                | declarator EQ initializer

   98 storage_class_specifier: EXTERN
   99                        | STATIC
  100                        | AUTO
  101                        | REGISTER

  102 type_specifier: VOID
  103               | CHAR
  104               | SHORT
  105               | INT
  106               | LONG
  107               | FLOAT
  108               | DOUBLE
  109               | SIGNED
  110               | UNSIGNED
  111               | BOOL
  112               | COMPLEX
  113               | IMAGINARY
  114               | enum_specifier

  115 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt
  116                         | type_qualifier specifier_qualifier_list_opt

  117 specifier_qualifier_list_opt: specifier_qualifier_list
  118                             | ε

  119 enum_specifier: ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | ENUM IDENTIFIER

  122 identifier_opt: IDENTIFIER
  123               | ε

  124 enumerator_list: enumerator
  125                | enumerator_list COMMA enumerator

  126 enumerator: IDENTIFIER
  127           | IDENTIFIER EQ constant_expression

  128 type_qualifier: CONST
  129               | RESTRICT
  130               | VOLATILE

  131 function_specifier: INLINE

  132 declarator: pointer_opt direct_declarator

  133 pointer_opt: pointer
  134            | ε

  135 direct_declarator: IDENTIFIER
  136                  | LF_PRNTH declarator RT_PRNTH
  137                  | direct_declarator LF_SQBR type_qualifier_list assignment_expression_opt RT_SQBR
  138                  | direct_declarator LF_SQBR assignment_expression_opt RT_SQBR
  139                  | direct_declarator LF_SQBR STATIC type_qualifier_list_opt assignment_expression RT_SQBR
  140                  | direct_declarator LF_SQBR type_qualifier_list STATIC assignment_expression RT_SQBR
  141                  | direct_declarator LF_PRNTH enter_func parameter_type_list RT_PRNTH
  142                  | direct_declarator LF_PRNTH identifier_list RT_PRNTH
  143                  | direct_declarator LF_PRNTH enter_func RT_PRNTH

  144 type_qualifier_list_opt: type_qualifier_list
  145                        | ε

  146 assignment_expression_opt: assignment_expression
  147                          | ε

  148 pointer: ASTERIX type_qualifier_list_opt
  149        | ASTERIX type_qualifier_list_opt pointer

  150 type_qualifier_list: type_qualifier
  151                    | type_qualifier_list type_qualifier

  152 parameter_type_list: parameter_list
  153                    | parameter_list COMMA DOT_DOT_DOT

  154 parameter_list: parameter_declaration
  155               | parameter_list COMMA parameter_declaration

  156 parameter_declaration: declaration_specifiers declarator
  157                      | declaration_specifiers

  158 identifier_list: IDENTIFIER
  159                | identifier_list COMMA IDENTIFIER

  160 type_name: specifier_qualifier_list

  161 initializer: assignment_expression
  162            | LF_BRACE initializer_list RT_BRACE
  163            | LF_BRACE initializer_list COMMA RT_BRACE

  164 initializer_list: designation_opt initializer
  165                 | initializer_list COMMA designation_opt initializer

  166 designation_opt: designation
  167                | ε

  168 designation: designator_list EQ

  169 designator_list: designator
  170                | designator_list designator

  171 designator: LF_SQBR constant_expression RT_SQBR
  172           | DOT IDENTIFIER

  173 statement: labeled_statement
  174          | compound_statement
  175          | expression_statement
  176          | selection_statement
  177          | iteration_statement
  178          | jump_statement

  179 labeled_statement: IDENTIFIER COLON statement
  180                  | CASE constant_expression COLON statement
  181                  | DEFAULT COLON statement

  182 compound_statement: LF_BRACE enter_block block_item_list_opt RT_BRACE

  183 block_item_list_opt: block_item_list
  184                    | ε

  185 block_item_list: block_item
  186                | block_item_list marker_M block_item

  187 block_item: declaration
  188           | statement

  189 expression_statement: expression_opt SEMICOLON

  190 expression_opt: expression
  191               | ε

  192 selection_statement: IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | SWITCH LF_PRNTH expression RT_PRNTH statement

  195 iteration_statement: WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement

  199 jump_statement: GOTO IDENTIFIER SEMICOLON
  200               | CONTINUE SEMICOLON
  201               | BREAK SEMICOLON
  202               | RETURN expression SEMICOLON
  203               | RETURN SEMICOLON

  204 translation_unit: external_declaration
  205                 | translation_unit external_declaration

  206 external_declaration: function_definition
  207                     | declaration

  208 function_definition: declaration_specifiers declarator declaration_list_opt enter_func create_label LF_BRACE block_item_list_opt RT_BRACE

  209 declaration_list_opt: declaration_list
  210                     | ε

  211 declaration_list: declaration
  212                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <sym_ptr> (258) 6 15 16 121 122 126 127 135 158 159 172 179 199
    INTEGER_CONSTANT <str_attr> (259) 7
    FLOATING_CONSTANT <str_attr> (260) 8
    CHARACTER_CONSTANT <str_attr> (261) 9
    STRING_LITERAL <str_attr> (262) 10
    AUTO (263) 100
    STATIC (264) 99 139 140
    ENUM (265) 119 120 121
    RESTRICT (266) 129
    UNSIGNED (267) 110
    BREAK (268) 201
    EXTERN (269) 98
    RETURN (270) 202 203
    VOID (271) 102
    CASE (272) 180
    FLOAT (273) 107
    SHORT (274) 104
    VOLATILE (275) 130
    CHAR (276) 103
    FOR (277) 197 198
    SIGNED (278) 109
    WHILE (279) 195 196
    CONST (280) 128
    GOTO (281) 199
    SIZEOF (282) 29 30
    BOOL (283) 111
    CONTINUE (284) 200
    IF (285) 192 193
    COMPLEX (286) 112
    DEFAULT (287) 181
    INLINE (288) 131
    STRUCT (289)
    IMAGINARY (290) 113
    DO (291) 196
    INT (292) 105
    SWITCH (293) 194
    DOUBLE (294) 108
    LONG (295) 106
    TYPEDEF (296)
    ELSE (297) 193
    REGISTER (298) 101
    UNION (299)
    LF_SQBR (300) 13 137 138 139 140 171
    RT_SQBR (301) 13 137 138 139 140 171
    LF_PRNTH (302) 11 14 19 20 30 38 136 141 142 143 192 193 194 195 196 197 198
    RT_PRNTH (303) 11 14 19 20 30 38 136 141 142 143 192 193 194 195 196 197 198
    LF_BRACE (304) 19 20 119 120 162 163 182 208
    RT_BRACE (305) 19 20 119 120 162 163 182 208
    DOT (306) 15 172
    ARROW (307) 16
    PLUS_PLUS (308) 17 26
    MINUS_MINUS (309) 18 27
    AMPRSND (310) 31 58
    ASTERIX (311) 32 40 148 149
    PLUS (312) 33 44
    MINUS (313) 34 45
    TILDE (314) 35
    EXCLAIM (315) 36
    SLASH (316) 41
    PRCNT (317) 42
    L_SHFT (318) 47
    R_SHFT (319) 48
    LESS_TH (320) 50
    MORE_TH (321) 51
    LESS_EQ (322) 52
    MORE_EQ (323) 53
    EQ_EQ (324) 55
    NOT_EQ (325) 56
    CAP (326) 60
    PIPE (327) 62
    AND_AND (328) 64
    OR_OR (329) 66
    Q_MARK (330) 68
    COLON (331) 68 179 180 181
    SEMICOLON (332) 85 189 196 197 198 199 200 201 202 203
    DOT_DOT_DOT (333) 153
    EQ (334) 71 97 127 168
    TIMES_EQ (335) 72
    SLASH_EQ (336) 73
    PRCNT_EQ (337) 74
    PLUS_EQ (338) 75
    MINUS_EQ (339) 76
    LS_EQ (340) 77
    RS_EQ (341) 78
    AND_EQ (342) 79
    XOR_EQ (343) 80
    OR_EQ (344) 81
    COMMA (345) 20 24 83 95 120 125 153 155 159 163 165
    HASH (346)
    UNKWN (347)
    NONELSE (348)


Nonterminals, with rules where they appear

    $accept (94)
        on left: 0
    marker_M <int_attr> (95)
        on left: 1
        on right: 64 66 68 186 192 193 195 196 197
    guard_N <expr> (96)
        on left: 2
        on right: 68 192 193 197
    enter_func (97)
        on left: 3
        on right: 141 143 208
    create_label (98)
        on left: 4
        on right: 208
    enter_block (99)
        on left: 5
        on right: 182
    primary_expression <expr> (100)
        on left: 6 7 8 9 10 11
        on right: 12
    postfix_expression <arr> (101)
        on left: 12 13 14 15 16 17 18 19 20
        on right: 13 14 15 16 17 18 25
    argument_expression_list_opt <str_vec> (102)
        on left: 21 22
        on right: 14
    argument_expression_list <str_vec> (103)
        on left: 23 24
        on right: 21 24
    unary_expression <arr> (104)
        on left: 25 26 27 28 29 30
        on right: 26 27 29 37 70
    unary_operator <str_attr> (105)
        on left: 31 32 33 34 35 36
        on right: 28
    cast_expression <arr> (106)
        on left: 37 38
        on right: 28 38 39 40 41 42
    multiplicative_expression <expr> (107)
        on left: 39 40 41 42
        on right: 40 41 42 43 44 45
    additive_expression <expr> (108)
        on left: 43 44 45
        on right: 44 45 46 47 48
    shift_expression <expr> (109)
        on left: 46 47 48
        on right: 47 48 49 50 51 52 53
    relational_expression <expr> (110)
        on left: 49 50 51 52 53
        on right: 50 51 52 53 54 55 56
    equality_expression <expr> (111)
        on left: 54 55 56
        on right: 55 56 57 58
    AND_expression <expr> (112)
        on left: 57 58
        on right: 58 59 60
    exclusive_OR_expression <expr> (113)
        on left: 59 60
        on right: 60 61 62
    inclusive_OR_expression <expr> (114)
        on left: 61 62
        on right: 62 63 64
    logical_AND_expression <expr> (115)
        on left: 63 64
        on right: 64 65 66
    logical_OR_expression <expr> (116)
        on left: 65 66
        on right: 66 67 68
    conditional_expression <expr> (117)
        on left: 67 68
        on right: 68 69 84
    assignment_expression <expr> (118)
        on left: 69 70
        on right: 23 24 70 82 83 139 140 146 161
    assignment_operator (119)
        on left: 71 72 73 74 75 76 77 78 79 80 81
        on right: 70
    expression <expr> (120)
        on left: 82 83
        on right: 11 13 68 83 190 192 193 194 195 196 202
    constant_expression <expr> (121)
        on left: 84
        on right: 127 171 180
    declaration (122)
        on left: 85
        on right: 187 198 207 211 212
    init_declarator_list_opt (123)
        on left: 86 87
        on right: 85
    declaration_specifiers (124)
        on left: 88 89 90 91
        on right: 85 92 156 157 208
    declaration_specifiers_opt (125)
        on left: 92 93
        on right: 88 89 90 91
    init_declarator_list (126)
        on left: 94 95
        on right: 86 95
    init_declarator <sym_ptr> (127)
        on left: 96 97
        on right: 94 95
    storage_class_specifier (128)
        on left: 98 99 100 101
        on right: 88
    type_specifier <str_attr> (129)
        on left: 102 103 104 105 106 107 108 109 110 111 112 113 114
        on right: 89 115
    specifier_qualifier_list <str_attr> (130)
        on left: 115 116
        on right: 117 160
    specifier_qualifier_list_opt <str_attr> (131)
        on left: 117 118
        on right: 115 116
    enum_specifier (132)
        on left: 119 120 121
        on right: 114
    identifier_opt (133)
        on left: 122 123
        on right: 119 120
    enumerator_list (134)
        on left: 124 125
        on right: 119 120 125
    enumerator (135)
        on left: 126 127
        on right: 124 125
    type_qualifier <str_attr> (136)
        on left: 128 129 130
        on right: 90 116 150 151
    function_specifier (137)
        on left: 131
        on right: 91
    declarator <sym_ptr> (138)
        on left: 132
        on right: 96 97 136 156 208
    pointer_opt <str_attr> (139)
        on left: 133 134
        on right: 132
    direct_declarator <sym_ptr> (140)
        on left: 135 136 137 138 139 140 141 142 143
        on right: 132 137 138 139 140 141 142 143
    type_qualifier_list_opt (141)
        on left: 144 145
        on right: 139 148 149
    assignment_expression_opt <expr> (142)
        on left: 146 147
        on right: 137 138
    pointer <str_attr> (143)
        on left: 148 149
        on right: 133 149
    type_qualifier_list (144)
        on left: 150 151
        on right: 137 140 144 151
    parameter_type_list (145)
        on left: 152 153
        on right: 141
    parameter_list (146)
        on left: 154 155
        on right: 152 153 155
    parameter_declaration (147)
        on left: 156 157
        on right: 154 155
    identifier_list (148)
        on left: 158 159
        on right: 142 159
    type_name <str_attr> (149)
        on left: 160
        on right: 19 20 30 38
    initializer <sym_ptr> (150)
        on left: 161 162 163
        on right: 97 164 165
    initializer_list (151)
        on left: 164 165
        on right: 19 20 162 163 165
    designation_opt (152)
        on left: 166 167
        on right: 164 165
    designation (153)
        on left: 168
        on right: 166
    designator_list (154)
        on left: 169 170
        on right: 168 170
    designator (155)
        on left: 171 172
        on right: 169 170
    statement <stmt> (156)
        on left: 173 174 175 176 177 178
        on right: 179 180 181 188 192 193 194 195 196 197 198
    labeled_statement <stmt> (157)
        on left: 179 180 181
        on right: 173
    compound_statement <stmt> (158)
        on left: 182
        on right: 174
    block_item_list_opt <stmt> (159)
        on left: 183 184
        on right: 182 208
    block_item_list <stmt> (160)
        on left: 185 186
        on right: 183 186
    block_item <stmt> (161)
        on left: 187 188
        on right: 185 186
    expression_statement <stmt> (162)
        on left: 189
        on right: 175
    expression_opt <expr> (163)
        on left: 190 191
        on right: 189 197 198
    selection_statement <stmt> (164)
        on left: 192 193 194
        on right: 176
    iteration_statement <stmt> (165)
        on left: 195 196 197 198
        on right: 177
    jump_statement <stmt> (166)
        on left: 199 200 201 202 203
        on right: 178
    translation_unit (167)
        on left: 204 205
        on right: 0 205
    external_declaration (168)
        on left: 206 207
        on right: 204 205
    function_definition (169)
        on left: 208
        on right: 206
    declaration_list_opt (170)
        on left: 209 210
        on right: 208
    declaration_list (171)
        on left: 211 212
        on right: 209 212


State 0

    0 $accept: • translation_unit $end
   85 declaration: • declaration_specifiers init_declarator_list_opt SEMICOLON
   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE
  204 translation_unit: • external_declaration
  205                 | • translation_unit external_declaration
  206 external_declaration: • function_definition
  207                     | • declaration
  208 function_definition: • declaration_specifiers declarator declaration_list_opt enter_func create_label LF_BRACE block_item_list_opt RT_BRACE

    AUTO       shift, and go to state 1
    STATIC     shift, and go to state 2
    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    EXTERN     shift, and go to state 6
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    translation_unit         go to state 29
    external_declaration     go to state 30
    function_definition      go to state 31


State 1

  100 storage_class_specifier: AUTO •

    $default  reduce using rule 100 (storage_class_specifier)


State 2

   99 storage_class_specifier: STATIC •

    $default  reduce using rule 99 (storage_class_specifier)


State 3

  119 enum_specifier: ENUM • identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | ENUM • identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | ENUM • IDENTIFIER
  122 identifier_opt: • IDENTIFIER
  123               | ε •  [LF_BRACE]

    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 123 (identifier_opt)

    identifier_opt  go to state 33


State 4

  129 type_qualifier: RESTRICT •

    $default  reduce using rule 129 (type_qualifier)


State 5

  110 type_specifier: UNSIGNED •

    $default  reduce using rule 110 (type_specifier)


State 6

   98 storage_class_specifier: EXTERN •

    $default  reduce using rule 98 (storage_class_specifier)


State 7

  102 type_specifier: VOID •

    $default  reduce using rule 102 (type_specifier)


State 8

  107 type_specifier: FLOAT •

    $default  reduce using rule 107 (type_specifier)


State 9

  104 type_specifier: SHORT •

    $default  reduce using rule 104 (type_specifier)


State 10

  130 type_qualifier: VOLATILE •

    $default  reduce using rule 130 (type_qualifier)


State 11

  103 type_specifier: CHAR •

    $default  reduce using rule 103 (type_specifier)


State 12

  109 type_specifier: SIGNED •

    $default  reduce using rule 109 (type_specifier)


State 13

  128 type_qualifier: CONST •

    $default  reduce using rule 128 (type_qualifier)


State 14

  111 type_specifier: BOOL •

    $default  reduce using rule 111 (type_specifier)


State 15

  112 type_specifier: COMPLEX •

    $default  reduce using rule 112 (type_specifier)


State 16

  131 function_specifier: INLINE •

    $default  reduce using rule 131 (function_specifier)


State 17

  113 type_specifier: IMAGINARY •

    $default  reduce using rule 113 (type_specifier)


State 18

  105 type_specifier: INT •

    $default  reduce using rule 105 (type_specifier)


State 19

  108 type_specifier: DOUBLE •

    $default  reduce using rule 108 (type_specifier)


State 20

  106 type_specifier: LONG •

    $default  reduce using rule 106 (type_specifier)


State 21

  101 storage_class_specifier: REGISTER •

    $default  reduce using rule 101 (storage_class_specifier)


State 22

  207 external_declaration: declaration •

    $default  reduce using rule 207 (external_declaration)


State 23

   85 declaration: declaration_specifiers • init_declarator_list_opt SEMICOLON
   86 init_declarator_list_opt: • init_declarator_list
   87                         | ε •  [SEMICOLON]
   94 init_declarator_list: • init_declarator
   95                     | • init_declarator_list COMMA init_declarator
   96 init_declarator: • declarator
   97                | • declarator EQ initializer
  132 declarator: • pointer_opt direct_declarator
  133 pointer_opt: • pointer
  134            | ε •  [IDENTIFIER, LF_PRNTH]
  148 pointer: • ASTERIX type_qualifier_list_opt
  149        | • ASTERIX type_qualifier_list_opt pointer
  208 function_definition: declaration_specifiers • declarator declaration_list_opt enter_func create_label LF_BRACE block_item_list_opt RT_BRACE

    ASTERIX  shift, and go to state 34

    SEMICOLON  reduce using rule 87 (init_declarator_list_opt)
    $default   reduce using rule 134 (pointer_opt)

    init_declarator_list_opt  go to state 35
    init_declarator_list      go to state 36
    init_declarator           go to state 37
    declarator                go to state 38
    pointer_opt               go to state 39
    pointer                   go to state 40


State 24

   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   88                       | storage_class_specifier • declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   92 declaration_specifiers_opt: • declaration_specifiers
   93                           | ε •  [IDENTIFIER, LF_PRNTH, RT_PRNTH, ASTERIX, SEMICOLON, COMMA]
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    STATIC     shift, and go to state 2
    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    EXTERN     shift, and go to state 6
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 93 (declaration_specifiers_opt)

    declaration_specifiers      go to state 41
    declaration_specifiers_opt  go to state 42
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 25

   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   89                       | type_specifier • declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   92 declaration_specifiers_opt: • declaration_specifiers
   93                           | ε •  [IDENTIFIER, LF_PRNTH, RT_PRNTH, ASTERIX, SEMICOLON, COMMA]
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    STATIC     shift, and go to state 2
    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    EXTERN     shift, and go to state 6
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 93 (declaration_specifiers_opt)

    declaration_specifiers      go to state 41
    declaration_specifiers_opt  go to state 43
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 26

  114 type_specifier: enum_specifier •

    $default  reduce using rule 114 (type_specifier)


State 27

   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   90                       | type_qualifier • declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   92 declaration_specifiers_opt: • declaration_specifiers
   93                           | ε •  [IDENTIFIER, LF_PRNTH, RT_PRNTH, ASTERIX, SEMICOLON, COMMA]
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    STATIC     shift, and go to state 2
    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    EXTERN     shift, and go to state 6
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 93 (declaration_specifiers_opt)

    declaration_specifiers      go to state 41
    declaration_specifiers_opt  go to state 44
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 28

   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   91                       | function_specifier • declaration_specifiers_opt
   92 declaration_specifiers_opt: • declaration_specifiers
   93                           | ε •  [IDENTIFIER, LF_PRNTH, RT_PRNTH, ASTERIX, SEMICOLON, COMMA]
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    STATIC     shift, and go to state 2
    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    EXTERN     shift, and go to state 6
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 93 (declaration_specifiers_opt)

    declaration_specifiers      go to state 41
    declaration_specifiers_opt  go to state 45
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 29

    0 $accept: translation_unit • $end
   85 declaration: • declaration_specifiers init_declarator_list_opt SEMICOLON
   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE
  205 translation_unit: translation_unit • external_declaration
  206 external_declaration: • function_definition
  207                     | • declaration
  208 function_definition: • declaration_specifiers declarator declaration_list_opt enter_func create_label LF_BRACE block_item_list_opt RT_BRACE

    $end       shift, and go to state 46
    AUTO       shift, and go to state 1
    STATIC     shift, and go to state 2
    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    EXTERN     shift, and go to state 6
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    external_declaration     go to state 47
    function_definition      go to state 31


State 30

  204 translation_unit: external_declaration •

    $default  reduce using rule 204 (translation_unit)


State 31

  206 external_declaration: function_definition •

    $default  reduce using rule 206 (external_declaration)


State 32

  121 enum_specifier: ENUM IDENTIFIER •  [IDENTIFIER, AUTO, STATIC, ENUM, RESTRICT, UNSIGNED, EXTERN, VOID, FLOAT, SHORT, VOLATILE, CHAR, SIGNED, CONST, BOOL, COMPLEX, INLINE, IMAGINARY, INT, DOUBLE, LONG, REGISTER, LF_PRNTH, RT_PRNTH, ASTERIX, SEMICOLON, COMMA]
  122 identifier_opt: IDENTIFIER •  [LF_BRACE]

    LF_BRACE  reduce using rule 122 (identifier_opt)
    $default  reduce using rule 121 (enum_specifier)


State 33

  119 enum_specifier: ENUM identifier_opt • LF_BRACE enumerator_list RT_BRACE
  120               | ENUM identifier_opt • LF_BRACE enumerator_list COMMA RT_BRACE

    LF_BRACE  shift, and go to state 48


State 34

  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  144 type_qualifier_list_opt: • type_qualifier_list
  145                        | ε •  [IDENTIFIER, LF_PRNTH, ASTERIX]
  148 pointer: ASTERIX • type_qualifier_list_opt
  149        | ASTERIX • type_qualifier_list_opt pointer
  150 type_qualifier_list: • type_qualifier
  151                    | • type_qualifier_list type_qualifier

    RESTRICT  shift, and go to state 4
    VOLATILE  shift, and go to state 10
    CONST     shift, and go to state 13

    $default  reduce using rule 145 (type_qualifier_list_opt)

    type_qualifier           go to state 49
    type_qualifier_list_opt  go to state 50
    type_qualifier_list      go to state 51


State 35

   85 declaration: declaration_specifiers init_declarator_list_opt • SEMICOLON

    SEMICOLON  shift, and go to state 52


State 36

   86 init_declarator_list_opt: init_declarator_list •  [SEMICOLON]
   95 init_declarator_list: init_declarator_list • COMMA init_declarator

    COMMA  shift, and go to state 53

    $default  reduce using rule 86 (init_declarator_list_opt)


State 37

   94 init_declarator_list: init_declarator •

    $default  reduce using rule 94 (init_declarator_list)


State 38

   85 declaration: • declaration_specifiers init_declarator_list_opt SEMICOLON
   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   96 init_declarator: declarator •  [SEMICOLON, COMMA]
   97                | declarator • EQ initializer
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE
  208 function_definition: declaration_specifiers declarator • declaration_list_opt enter_func create_label LF_BRACE block_item_list_opt RT_BRACE
  209 declaration_list_opt: • declaration_list
  210                     | ε •  [LF_BRACE]
  211 declaration_list: • declaration
  212                 | • declaration_list declaration

    AUTO       shift, and go to state 1
    STATIC     shift, and go to state 2
    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    EXTERN     shift, and go to state 6
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21
    EQ         shift, and go to state 54

    LF_BRACE  reduce using rule 210 (declaration_list_opt)
    $default  reduce using rule 96 (init_declarator)

    declaration              go to state 55
    declaration_specifiers   go to state 56
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    declaration_list_opt     go to state 57
    declaration_list         go to state 58


State 39

  132 declarator: pointer_opt • direct_declarator
  135 direct_declarator: • IDENTIFIER
  136                  | • LF_PRNTH declarator RT_PRNTH
  137                  | • direct_declarator LF_SQBR type_qualifier_list assignment_expression_opt RT_SQBR
  138                  | • direct_declarator LF_SQBR assignment_expression_opt RT_SQBR
  139                  | • direct_declarator LF_SQBR STATIC type_qualifier_list_opt assignment_expression RT_SQBR
  140                  | • direct_declarator LF_SQBR type_qualifier_list STATIC assignment_expression RT_SQBR
  141                  | • direct_declarator LF_PRNTH enter_func parameter_type_list RT_PRNTH
  142                  | • direct_declarator LF_PRNTH identifier_list RT_PRNTH
  143                  | • direct_declarator LF_PRNTH enter_func RT_PRNTH

    IDENTIFIER  shift, and go to state 59
    LF_PRNTH    shift, and go to state 60

    direct_declarator  go to state 61


State 40

  133 pointer_opt: pointer •

    $default  reduce using rule 133 (pointer_opt)


State 41

   92 declaration_specifiers_opt: declaration_specifiers •

    $default  reduce using rule 92 (declaration_specifiers_opt)


State 42

   88 declaration_specifiers: storage_class_specifier declaration_specifiers_opt •

    $default  reduce using rule 88 (declaration_specifiers)


State 43

   89 declaration_specifiers: type_specifier declaration_specifiers_opt •

    $default  reduce using rule 89 (declaration_specifiers)


State 44

   90 declaration_specifiers: type_qualifier declaration_specifiers_opt •

    $default  reduce using rule 90 (declaration_specifiers)


State 45

   91 declaration_specifiers: function_specifier declaration_specifiers_opt •

    $default  reduce using rule 91 (declaration_specifiers)


State 46

    0 $accept: translation_unit $end •

    $default  accept


State 47

  205 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 205 (translation_unit)


State 48

  119 enum_specifier: ENUM identifier_opt LF_BRACE • enumerator_list RT_BRACE
  120               | ENUM identifier_opt LF_BRACE • enumerator_list COMMA RT_BRACE
  124 enumerator_list: • enumerator
  125                | • enumerator_list COMMA enumerator
  126 enumerator: • IDENTIFIER
  127           | • IDENTIFIER EQ constant_expression

    IDENTIFIER  shift, and go to state 62

    enumerator_list  go to state 63
    enumerator       go to state 64


State 49

  150 type_qualifier_list: type_qualifier •

    $default  reduce using rule 150 (type_qualifier_list)


State 50

  148 pointer: • ASTERIX type_qualifier_list_opt
  148        | ASTERIX type_qualifier_list_opt •  [IDENTIFIER, LF_PRNTH]
  149        | • ASTERIX type_qualifier_list_opt pointer
  149        | ASTERIX type_qualifier_list_opt • pointer

    ASTERIX  shift, and go to state 34

    $default  reduce using rule 148 (pointer)

    pointer  go to state 65


State 51

  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  144 type_qualifier_list_opt: type_qualifier_list •  [IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, SIZEOF, LF_PRNTH, PLUS_PLUS, MINUS_MINUS, AMPRSND, ASTERIX, PLUS, MINUS, TILDE, EXCLAIM]
  151 type_qualifier_list: type_qualifier_list • type_qualifier

    RESTRICT  shift, and go to state 4
    VOLATILE  shift, and go to state 10
    CONST     shift, and go to state 13

    $default  reduce using rule 144 (type_qualifier_list_opt)

    type_qualifier  go to state 66


State 52

   85 declaration: declaration_specifiers init_declarator_list_opt SEMICOLON •

    $default  reduce using rule 85 (declaration)


State 53

   95 init_declarator_list: init_declarator_list COMMA • init_declarator
   96 init_declarator: • declarator
   97                | • declarator EQ initializer
  132 declarator: • pointer_opt direct_declarator
  133 pointer_opt: • pointer
  134            | ε •  [IDENTIFIER, LF_PRNTH]
  148 pointer: • ASTERIX type_qualifier_list_opt
  149        | • ASTERIX type_qualifier_list_opt pointer

    ASTERIX  shift, and go to state 34

    $default  reduce using rule 134 (pointer_opt)

    init_declarator  go to state 67
    declarator       go to state 68
    pointer_opt      go to state 39
    pointer          go to state 40


State 54

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   97 init_declarator: declarator EQ • initializer
  161 initializer: • assignment_expression
  162            | • LF_BRACE initializer_list RT_BRACE
  163            | • LF_BRACE initializer_list COMMA RT_BRACE

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 76
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 101
    initializer                go to state 102


State 55

  211 declaration_list: declaration •

    $default  reduce using rule 211 (declaration_list)


State 56

   85 declaration: declaration_specifiers • init_declarator_list_opt SEMICOLON
   86 init_declarator_list_opt: • init_declarator_list
   87                         | ε •  [SEMICOLON]
   94 init_declarator_list: • init_declarator
   95                     | • init_declarator_list COMMA init_declarator
   96 init_declarator: • declarator
   97                | • declarator EQ initializer
  132 declarator: • pointer_opt direct_declarator
  133 pointer_opt: • pointer
  134            | ε •  [IDENTIFIER, LF_PRNTH]
  148 pointer: • ASTERIX type_qualifier_list_opt
  149        | • ASTERIX type_qualifier_list_opt pointer

    ASTERIX  shift, and go to state 34

    SEMICOLON  reduce using rule 87 (init_declarator_list_opt)
    $default   reduce using rule 134 (pointer_opt)

    init_declarator_list_opt  go to state 35
    init_declarator_list      go to state 36
    init_declarator           go to state 37
    declarator                go to state 68
    pointer_opt               go to state 39
    pointer                   go to state 40


State 57

    3 enter_func: ε •
  208 function_definition: declaration_specifiers declarator declaration_list_opt • enter_func create_label LF_BRACE block_item_list_opt RT_BRACE

    $default  reduce using rule 3 (enter_func)

    enter_func  go to state 103


State 58

   85 declaration: • declaration_specifiers init_declarator_list_opt SEMICOLON
   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE
  209 declaration_list_opt: declaration_list •  [LF_BRACE]
  212 declaration_list: declaration_list • declaration

    AUTO       shift, and go to state 1
    STATIC     shift, and go to state 2
    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    EXTERN     shift, and go to state 6
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 209 (declaration_list_opt)

    declaration              go to state 104
    declaration_specifiers   go to state 56
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 59

  135 direct_declarator: IDENTIFIER •

    $default  reduce using rule 135 (direct_declarator)


State 60

  132 declarator: • pointer_opt direct_declarator
  133 pointer_opt: • pointer
  134            | ε •  [IDENTIFIER, LF_PRNTH]
  136 direct_declarator: LF_PRNTH • declarator RT_PRNTH
  148 pointer: • ASTERIX type_qualifier_list_opt
  149        | • ASTERIX type_qualifier_list_opt pointer

    ASTERIX  shift, and go to state 34

    $default  reduce using rule 134 (pointer_opt)

    declarator   go to state 105
    pointer_opt  go to state 39
    pointer      go to state 40


State 61

  132 declarator: pointer_opt direct_declarator •  [AUTO, STATIC, ENUM, RESTRICT, UNSIGNED, EXTERN, VOID, FLOAT, SHORT, VOLATILE, CHAR, SIGNED, CONST, BOOL, COMPLEX, INLINE, IMAGINARY, INT, DOUBLE, LONG, REGISTER, RT_PRNTH, LF_BRACE, SEMICOLON, EQ, COMMA]
  137 direct_declarator: direct_declarator • LF_SQBR type_qualifier_list assignment_expression_opt RT_SQBR
  138                  | direct_declarator • LF_SQBR assignment_expression_opt RT_SQBR
  139                  | direct_declarator • LF_SQBR STATIC type_qualifier_list_opt assignment_expression RT_SQBR
  140                  | direct_declarator • LF_SQBR type_qualifier_list STATIC assignment_expression RT_SQBR
  141                  | direct_declarator • LF_PRNTH enter_func parameter_type_list RT_PRNTH
  142                  | direct_declarator • LF_PRNTH identifier_list RT_PRNTH
  143                  | direct_declarator • LF_PRNTH enter_func RT_PRNTH

    LF_SQBR   shift, and go to state 106
    LF_PRNTH  shift, and go to state 107

    $default  reduce using rule 132 (declarator)


State 62

  126 enumerator: IDENTIFIER •  [RT_BRACE, COMMA]
  127           | IDENTIFIER • EQ constant_expression

    EQ  shift, and go to state 108

    $default  reduce using rule 126 (enumerator)


State 63

  119 enum_specifier: ENUM identifier_opt LF_BRACE enumerator_list • RT_BRACE
  120               | ENUM identifier_opt LF_BRACE enumerator_list • COMMA RT_BRACE
  125 enumerator_list: enumerator_list • COMMA enumerator

    RT_BRACE  shift, and go to state 109
    COMMA     shift, and go to state 110


State 64

  124 enumerator_list: enumerator •

    $default  reduce using rule 124 (enumerator_list)


State 65

  149 pointer: ASTERIX type_qualifier_list_opt pointer •

    $default  reduce using rule 149 (pointer)


State 66

  151 type_qualifier_list: type_qualifier_list type_qualifier •

    $default  reduce using rule 151 (type_qualifier_list)


State 67

   95 init_declarator_list: init_declarator_list COMMA init_declarator •

    $default  reduce using rule 95 (init_declarator_list)


State 68

   96 init_declarator: declarator •  [SEMICOLON, COMMA]
   97                | declarator • EQ initializer

    EQ  shift, and go to state 54

    $default  reduce using rule 96 (init_declarator)


State 69

    6 primary_expression: IDENTIFIER •

    $default  reduce using rule 6 (primary_expression)


State 70

    7 primary_expression: INTEGER_CONSTANT •

    $default  reduce using rule 7 (primary_expression)


State 71

    8 primary_expression: FLOATING_CONSTANT •

    $default  reduce using rule 8 (primary_expression)


State 72

    9 primary_expression: CHARACTER_CONSTANT •

    $default  reduce using rule 9 (primary_expression)


State 73

   10 primary_expression: STRING_LITERAL •

    $default  reduce using rule 10 (primary_expression)


State 74

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   29                 | SIZEOF • unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   30                 | SIZEOF • LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 111
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression  go to state 85
    postfix_expression  go to state 86
    unary_expression    go to state 112
    unary_operator      go to state 88


State 75

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   11                   | LF_PRNTH • expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   19                   | LF_PRNTH • type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   20                   | LF_PRNTH • type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   38                | LF_PRNTH • type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  115 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  116                         | • type_qualifier specifier_qualifier_list_opt
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  160 type_name: • specifier_qualifier_list

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    ENUM                shift, and go to state 3
    RESTRICT            shift, and go to state 4
    UNSIGNED            shift, and go to state 5
    VOID                shift, and go to state 7
    FLOAT               shift, and go to state 8
    SHORT               shift, and go to state 9
    VOLATILE            shift, and go to state 10
    CHAR                shift, and go to state 11
    SIGNED              shift, and go to state 12
    CONST               shift, and go to state 13
    SIZEOF              shift, and go to state 74
    BOOL                shift, and go to state 14
    COMPLEX             shift, and go to state 15
    IMAGINARY           shift, and go to state 17
    INT                 shift, and go to state 18
    DOUBLE              shift, and go to state 19
    LONG                shift, and go to state 20
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 114
    type_specifier             go to state 115
    specifier_qualifier_list   go to state 116
    enum_specifier             go to state 26
    type_qualifier             go to state 117
    type_name                  go to state 118


State 76

  162 initializer: LF_BRACE • initializer_list RT_BRACE
  163            | LF_BRACE • initializer_list COMMA RT_BRACE
  164 initializer_list: • designation_opt initializer
  165                 | • initializer_list COMMA designation_opt initializer
  166 designation_opt: • designation
  167                | ε •  [IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, SIZEOF, LF_PRNTH, LF_BRACE, PLUS_PLUS, MINUS_MINUS, AMPRSND, ASTERIX, PLUS, MINUS, TILDE, EXCLAIM]
  168 designation: • designator_list EQ
  169 designator_list: • designator
  170                | • designator_list designator
  171 designator: • LF_SQBR constant_expression RT_SQBR
  172           | • DOT IDENTIFIER

    LF_SQBR  shift, and go to state 119
    DOT      shift, and go to state 120

    $default  reduce using rule 167 (designation_opt)

    initializer_list  go to state 121
    designation_opt   go to state 122
    designation       go to state 123
    designator_list   go to state 124
    designator        go to state 125


State 77

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   26                 | PLUS_PLUS • unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 126
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression  go to state 85
    postfix_expression  go to state 86
    unary_expression    go to state 127
    unary_operator      go to state 88


State 78

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   27                 | MINUS_MINUS • unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 126
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression  go to state 85
    postfix_expression  go to state 86
    unary_expression    go to state 128
    unary_operator      go to state 88


State 79

   31 unary_operator: AMPRSND •

    $default  reduce using rule 31 (unary_operator)


State 80

   32 unary_operator: ASTERIX •

    $default  reduce using rule 32 (unary_operator)


State 81

   33 unary_operator: PLUS •

    $default  reduce using rule 33 (unary_operator)


State 82

   34 unary_operator: MINUS •

    $default  reduce using rule 34 (unary_operator)


State 83

   35 unary_operator: TILDE •

    $default  reduce using rule 35 (unary_operator)


State 84

   36 unary_operator: EXCLAIM •

    $default  reduce using rule 36 (unary_operator)


State 85

   12 postfix_expression: primary_expression •

    $default  reduce using rule 12 (postfix_expression)


State 86

   13 postfix_expression: postfix_expression • LF_SQBR expression RT_SQBR
   14                   | postfix_expression • LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | postfix_expression • DOT IDENTIFIER
   16                   | postfix_expression • ARROW IDENTIFIER
   17                   | postfix_expression • PLUS_PLUS
   18                   | postfix_expression • MINUS_MINUS
   25 unary_expression: postfix_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, ASTERIX, PLUS, MINUS, SLASH, PRCNT, L_SHFT, R_SHFT, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, EQ, TIMES_EQ, SLASH_EQ, PRCNT_EQ, PLUS_EQ, MINUS_EQ, LS_EQ, RS_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA]

    LF_SQBR      shift, and go to state 129
    LF_PRNTH     shift, and go to state 130
    DOT          shift, and go to state 131
    ARROW        shift, and go to state 132
    PLUS_PLUS    shift, and go to state 133
    MINUS_MINUS  shift, and go to state 134

    $default  reduce using rule 25 (unary_expression)


State 87

   37 cast_expression: unary_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, ASTERIX, PLUS, MINUS, SLASH, PRCNT, L_SHFT, R_SHFT, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]
   70 assignment_expression: unary_expression • assignment_operator assignment_expression
   71 assignment_operator: • EQ
   72                    | • TIMES_EQ
   73                    | • SLASH_EQ
   74                    | • PRCNT_EQ
   75                    | • PLUS_EQ
   76                    | • MINUS_EQ
   77                    | • LS_EQ
   78                    | • RS_EQ
   79                    | • AND_EQ
   80                    | • XOR_EQ
   81                    | • OR_EQ

    EQ        shift, and go to state 135
    TIMES_EQ  shift, and go to state 136
    SLASH_EQ  shift, and go to state 137
    PRCNT_EQ  shift, and go to state 138
    PLUS_EQ   shift, and go to state 139
    MINUS_EQ  shift, and go to state 140
    LS_EQ     shift, and go to state 141
    RS_EQ     shift, and go to state 142
    AND_EQ    shift, and go to state 143
    XOR_EQ    shift, and go to state 144
    OR_EQ     shift, and go to state 145

    $default  reduce using rule 37 (cast_expression)

    assignment_operator  go to state 146


State 88

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   28                 | unary_operator • cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression  go to state 85
    postfix_expression  go to state 86
    unary_expression    go to state 147
    unary_operator      go to state 88
    cast_expression     go to state 148


State 89

   39 multiplicative_expression: cast_expression •

    $default  reduce using rule 39 (multiplicative_expression)


State 90

   40 multiplicative_expression: multiplicative_expression • ASTERIX cast_expression
   41                          | multiplicative_expression • SLASH cast_expression
   42                          | multiplicative_expression • PRCNT cast_expression
   43 additive_expression: multiplicative_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, PLUS, MINUS, L_SHFT, R_SHFT, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    ASTERIX  shift, and go to state 149
    SLASH    shift, and go to state 150
    PRCNT    shift, and go to state 151

    $default  reduce using rule 43 (additive_expression)


State 91

   44 additive_expression: additive_expression • PLUS multiplicative_expression
   45                    | additive_expression • MINUS multiplicative_expression
   46 shift_expression: additive_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, L_SHFT, R_SHFT, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    PLUS   shift, and go to state 152
    MINUS  shift, and go to state 153

    $default  reduce using rule 46 (shift_expression)


State 92

   47 shift_expression: shift_expression • L_SHFT additive_expression
   48                 | shift_expression • R_SHFT additive_expression
   49 relational_expression: shift_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    L_SHFT  shift, and go to state 154
    R_SHFT  shift, and go to state 155

    $default  reduce using rule 49 (relational_expression)


State 93

   50 relational_expression: relational_expression • LESS_TH shift_expression
   51                      | relational_expression • MORE_TH shift_expression
   52                      | relational_expression • LESS_EQ shift_expression
   53                      | relational_expression • MORE_EQ shift_expression
   54 equality_expression: relational_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    LESS_TH  shift, and go to state 156
    MORE_TH  shift, and go to state 157
    LESS_EQ  shift, and go to state 158
    MORE_EQ  shift, and go to state 159

    $default  reduce using rule 54 (equality_expression)


State 94

   55 equality_expression: equality_expression • EQ_EQ relational_expression
   56                    | equality_expression • NOT_EQ relational_expression
   57 AND_expression: equality_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    EQ_EQ   shift, and go to state 160
    NOT_EQ  shift, and go to state 161

    $default  reduce using rule 57 (AND_expression)


State 95

   58 AND_expression: AND_expression • AMPRSND equality_expression
   59 exclusive_OR_expression: AND_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    AMPRSND  shift, and go to state 162

    $default  reduce using rule 59 (exclusive_OR_expression)


State 96

   60 exclusive_OR_expression: exclusive_OR_expression • CAP AND_expression
   61 inclusive_OR_expression: exclusive_OR_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    CAP  shift, and go to state 163

    $default  reduce using rule 61 (inclusive_OR_expression)


State 97

   62 inclusive_OR_expression: inclusive_OR_expression • PIPE exclusive_OR_expression
   63 logical_AND_expression: inclusive_OR_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    PIPE  shift, and go to state 164

    $default  reduce using rule 63 (logical_AND_expression)


State 98

   64 logical_AND_expression: logical_AND_expression • AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: logical_AND_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    AND_AND  shift, and go to state 165

    $default  reduce using rule 65 (logical_OR_expression)


State 99

    2 guard_N: ε •  [Q_MARK]
   66 logical_OR_expression: logical_OR_expression • OR_OR marker_M logical_AND_expression
   67 conditional_expression: logical_OR_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, COLON, SEMICOLON, COMMA]
   68                       | logical_OR_expression • guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression

    OR_OR  shift, and go to state 166

    Q_MARK    reduce using rule 2 (guard_N)
    $default  reduce using rule 67 (conditional_expression)

    guard_N  go to state 167


State 100

   69 assignment_expression: conditional_expression •

    $default  reduce using rule 69 (assignment_expression)


State 101

  161 initializer: assignment_expression •

    $default  reduce using rule 161 (initializer)


State 102

   97 init_declarator: declarator EQ initializer •

    $default  reduce using rule 97 (init_declarator)


State 103

    4 create_label: ε •
  208 function_definition: declaration_specifiers declarator declaration_list_opt enter_func • create_label LF_BRACE block_item_list_opt RT_BRACE

    $default  reduce using rule 4 (create_label)

    create_label  go to state 168


State 104

  212 declaration_list: declaration_list declaration •

    $default  reduce using rule 212 (declaration_list)


State 105

  136 direct_declarator: LF_PRNTH declarator • RT_PRNTH

    RT_PRNTH  shift, and go to state 169


State 106

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  137 direct_declarator: direct_declarator LF_SQBR • type_qualifier_list assignment_expression_opt RT_SQBR
  138                  | direct_declarator LF_SQBR • assignment_expression_opt RT_SQBR
  139                  | direct_declarator LF_SQBR • STATIC type_qualifier_list_opt assignment_expression RT_SQBR
  140                  | direct_declarator LF_SQBR • type_qualifier_list STATIC assignment_expression RT_SQBR
  146 assignment_expression_opt: • assignment_expression
  147                          | ε •  [RT_SQBR]
  150 type_qualifier_list: • type_qualifier
  151                    | • type_qualifier_list type_qualifier

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    STATIC              shift, and go to state 170
    RESTRICT            shift, and go to state 4
    VOLATILE            shift, and go to state 10
    CONST               shift, and go to state 13
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 147 (assignment_expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 171
    type_qualifier             go to state 49
    assignment_expression_opt  go to state 172
    type_qualifier_list        go to state 173


State 107

    3 enter_func: ε •  [AUTO, STATIC, ENUM, RESTRICT, UNSIGNED, EXTERN, VOID, FLOAT, SHORT, VOLATILE, CHAR, SIGNED, CONST, BOOL, COMPLEX, INLINE, IMAGINARY, INT, DOUBLE, LONG, REGISTER, RT_PRNTH]
  141 direct_declarator: direct_declarator LF_PRNTH • enter_func parameter_type_list RT_PRNTH
  142                  | direct_declarator LF_PRNTH • identifier_list RT_PRNTH
  143                  | direct_declarator LF_PRNTH • enter_func RT_PRNTH
  158 identifier_list: • IDENTIFIER
  159                | • identifier_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 174

    $default  reduce using rule 3 (enter_func)

    enter_func       go to state 175
    identifier_list  go to state 176


State 108

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   84 constant_expression: • conditional_expression
  127 enumerator: IDENTIFIER EQ • constant_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 177
    constant_expression        go to state 178


State 109

  119 enum_specifier: ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE •

    $default  reduce using rule 119 (enum_specifier)


State 110

  120 enum_specifier: ENUM identifier_opt LF_BRACE enumerator_list COMMA • RT_BRACE
  125 enumerator_list: enumerator_list COMMA • enumerator
  126 enumerator: • IDENTIFIER
  127           | • IDENTIFIER EQ constant_expression

    IDENTIFIER  shift, and go to state 62
    RT_BRACE    shift, and go to state 179

    enumerator  go to state 180


State 111

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   11                   | LF_PRNTH • expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   19                   | LF_PRNTH • type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   20                   | LF_PRNTH • type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   30                 | SIZEOF LF_PRNTH • type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  115 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  116                         | • type_qualifier specifier_qualifier_list_opt
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  160 type_name: • specifier_qualifier_list

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    ENUM                shift, and go to state 3
    RESTRICT            shift, and go to state 4
    UNSIGNED            shift, and go to state 5
    VOID                shift, and go to state 7
    FLOAT               shift, and go to state 8
    SHORT               shift, and go to state 9
    VOLATILE            shift, and go to state 10
    CHAR                shift, and go to state 11
    SIGNED              shift, and go to state 12
    CONST               shift, and go to state 13
    SIZEOF              shift, and go to state 74
    BOOL                shift, and go to state 14
    COMPLEX             shift, and go to state 15
    IMAGINARY           shift, and go to state 17
    INT                 shift, and go to state 18
    DOUBLE              shift, and go to state 19
    LONG                shift, and go to state 20
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 114
    type_specifier             go to state 115
    specifier_qualifier_list   go to state 116
    enum_specifier             go to state 26
    type_qualifier             go to state 117
    type_name                  go to state 181


State 112

   29 unary_expression: SIZEOF unary_expression •

    $default  reduce using rule 29 (unary_expression)


State 113

   82 expression: assignment_expression •

    $default  reduce using rule 82 (expression)


State 114

   11 primary_expression: LF_PRNTH expression • RT_PRNTH
   83 expression: expression • COMMA assignment_expression

    RT_PRNTH  shift, and go to state 182
    COMMA     shift, and go to state 183


State 115

  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  115 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  115                         | type_specifier • specifier_qualifier_list_opt
  116                         | • type_qualifier specifier_qualifier_list_opt
  117 specifier_qualifier_list_opt: • specifier_qualifier_list
  118                             | ε •  [RT_PRNTH]
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE

    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20

    $default  reduce using rule 118 (specifier_qualifier_list_opt)

    type_specifier                go to state 115
    specifier_qualifier_list      go to state 184
    specifier_qualifier_list_opt  go to state 185
    enum_specifier                go to state 26
    type_qualifier                go to state 117


State 116

  160 type_name: specifier_qualifier_list •

    $default  reduce using rule 160 (type_name)


State 117

  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  115 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  116                         | • type_qualifier specifier_qualifier_list_opt
  116                         | type_qualifier • specifier_qualifier_list_opt
  117 specifier_qualifier_list_opt: • specifier_qualifier_list
  118                             | ε •  [RT_PRNTH]
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE

    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20

    $default  reduce using rule 118 (specifier_qualifier_list_opt)

    type_specifier                go to state 115
    specifier_qualifier_list      go to state 184
    specifier_qualifier_list_opt  go to state 186
    enum_specifier                go to state 26
    type_qualifier                go to state 117


State 118

   19 postfix_expression: LF_PRNTH type_name • RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | LF_PRNTH type_name • RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   38 cast_expression: LF_PRNTH type_name • RT_PRNTH cast_expression

    RT_PRNTH  shift, and go to state 187


State 119

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   84 constant_expression: • conditional_expression
  171 designator: LF_SQBR • constant_expression RT_SQBR

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 177
    constant_expression        go to state 188


State 120

  172 designator: DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 189


State 121

  162 initializer: LF_BRACE initializer_list • RT_BRACE
  163            | LF_BRACE initializer_list • COMMA RT_BRACE
  165 initializer_list: initializer_list • COMMA designation_opt initializer

    RT_BRACE  shift, and go to state 190
    COMMA     shift, and go to state 191


State 122

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
  161 initializer: • assignment_expression
  162            | • LF_BRACE initializer_list RT_BRACE
  163            | • LF_BRACE initializer_list COMMA RT_BRACE
  164 initializer_list: designation_opt • initializer

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 76
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 101
    initializer                go to state 192


State 123

  166 designation_opt: designation •

    $default  reduce using rule 166 (designation_opt)


State 124

  168 designation: designator_list • EQ
  170 designator_list: designator_list • designator
  171 designator: • LF_SQBR constant_expression RT_SQBR
  172           | • DOT IDENTIFIER

    LF_SQBR  shift, and go to state 119
    DOT      shift, and go to state 120
    EQ       shift, and go to state 193

    designator  go to state 194


State 125

  169 designator_list: designator •

    $default  reduce using rule 169 (designator_list)


State 126

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   11                   | LF_PRNTH • expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   19                   | LF_PRNTH • type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   20                   | LF_PRNTH • type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  115 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  116                         | • type_qualifier specifier_qualifier_list_opt
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  160 type_name: • specifier_qualifier_list

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    ENUM                shift, and go to state 3
    RESTRICT            shift, and go to state 4
    UNSIGNED            shift, and go to state 5
    VOID                shift, and go to state 7
    FLOAT               shift, and go to state 8
    SHORT               shift, and go to state 9
    VOLATILE            shift, and go to state 10
    CHAR                shift, and go to state 11
    SIGNED              shift, and go to state 12
    CONST               shift, and go to state 13
    SIZEOF              shift, and go to state 74
    BOOL                shift, and go to state 14
    COMPLEX             shift, and go to state 15
    IMAGINARY           shift, and go to state 17
    INT                 shift, and go to state 18
    DOUBLE              shift, and go to state 19
    LONG                shift, and go to state 20
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 114
    type_specifier             go to state 115
    specifier_qualifier_list   go to state 116
    enum_specifier             go to state 26
    type_qualifier             go to state 117
    type_name                  go to state 195


State 127

   26 unary_expression: PLUS_PLUS unary_expression •

    $default  reduce using rule 26 (unary_expression)


State 128

   27 unary_expression: MINUS_MINUS unary_expression •

    $default  reduce using rule 27 (unary_expression)


State 129

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   13                   | postfix_expression LF_SQBR • expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 196


State 130

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   14                   | postfix_expression LF_PRNTH • argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   21 argument_expression_list_opt: • argument_expression_list
   22                             | ε •  [RT_PRNTH]
   23 argument_expression_list: • assignment_expression
   24                         | • argument_expression_list COMMA assignment_expression
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 22 (argument_expression_list_opt)

    primary_expression            go to state 85
    postfix_expression            go to state 86
    argument_expression_list_opt  go to state 197
    argument_expression_list      go to state 198
    unary_expression              go to state 87
    unary_operator                go to state 88
    cast_expression               go to state 89
    multiplicative_expression     go to state 90
    additive_expression           go to state 91
    shift_expression              go to state 92
    relational_expression         go to state 93
    equality_expression           go to state 94
    AND_expression                go to state 95
    exclusive_OR_expression       go to state 96
    inclusive_OR_expression       go to state 97
    logical_AND_expression        go to state 98
    logical_OR_expression         go to state 99
    conditional_expression        go to state 100
    assignment_expression         go to state 199


State 131

   15 postfix_expression: postfix_expression DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 200


State 132

   16 postfix_expression: postfix_expression ARROW • IDENTIFIER

    IDENTIFIER  shift, and go to state 201


State 133

   17 postfix_expression: postfix_expression PLUS_PLUS •

    $default  reduce using rule 17 (postfix_expression)


State 134

   18 postfix_expression: postfix_expression MINUS_MINUS •

    $default  reduce using rule 18 (postfix_expression)


State 135

   71 assignment_operator: EQ •

    $default  reduce using rule 71 (assignment_operator)


State 136

   72 assignment_operator: TIMES_EQ •

    $default  reduce using rule 72 (assignment_operator)


State 137

   73 assignment_operator: SLASH_EQ •

    $default  reduce using rule 73 (assignment_operator)


State 138

   74 assignment_operator: PRCNT_EQ •

    $default  reduce using rule 74 (assignment_operator)


State 139

   75 assignment_operator: PLUS_EQ •

    $default  reduce using rule 75 (assignment_operator)


State 140

   76 assignment_operator: MINUS_EQ •

    $default  reduce using rule 76 (assignment_operator)


State 141

   77 assignment_operator: LS_EQ •

    $default  reduce using rule 77 (assignment_operator)


State 142

   78 assignment_operator: RS_EQ •

    $default  reduce using rule 78 (assignment_operator)


State 143

   79 assignment_operator: AND_EQ •

    $default  reduce using rule 79 (assignment_operator)


State 144

   80 assignment_operator: XOR_EQ •

    $default  reduce using rule 80 (assignment_operator)


State 145

   81 assignment_operator: OR_EQ •

    $default  reduce using rule 81 (assignment_operator)


State 146

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   70                      | unary_expression assignment_operator • assignment_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 202


State 147

   37 cast_expression: unary_expression •

    $default  reduce using rule 37 (cast_expression)


State 148

   28 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 28 (unary_expression)


State 149

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   40 multiplicative_expression: multiplicative_expression ASTERIX • cast_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression  go to state 85
    postfix_expression  go to state 86
    unary_expression    go to state 147
    unary_operator      go to state 88
    cast_expression     go to state 203


State 150

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   41 multiplicative_expression: multiplicative_expression SLASH • cast_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression  go to state 85
    postfix_expression  go to state 86
    unary_expression    go to state 147
    unary_operator      go to state 88
    cast_expression     go to state 204


State 151

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   42 multiplicative_expression: multiplicative_expression PRCNT • cast_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression  go to state 85
    postfix_expression  go to state 86
    unary_expression    go to state 147
    unary_operator      go to state 88
    cast_expression     go to state 205


State 152

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   44 additive_expression: additive_expression PLUS • multiplicative_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 206


State 153

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   45 additive_expression: additive_expression MINUS • multiplicative_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 207


State 154

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   47 shift_expression: shift_expression L_SHFT • additive_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 208


State 155

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   48 shift_expression: shift_expression R_SHFT • additive_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 209


State 156

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   50 relational_expression: relational_expression LESS_TH • shift_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 210


State 157

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   51 relational_expression: relational_expression MORE_TH • shift_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 211


State 158

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   52 relational_expression: relational_expression LESS_EQ • shift_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 212


State 159

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   53 relational_expression: relational_expression MORE_EQ • shift_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 213


State 160

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   55 equality_expression: equality_expression EQ_EQ • relational_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 214


State 161

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   56 equality_expression: equality_expression NOT_EQ • relational_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 215


State 162

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   58 AND_expression: AND_expression AMPRSND • equality_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 216


State 163

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   60 exclusive_OR_expression: exclusive_OR_expression CAP • AND_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 217


State 164

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   62 inclusive_OR_expression: inclusive_OR_expression PIPE • exclusive_OR_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 218


State 165

    1 marker_M: ε •
   64 logical_AND_expression: logical_AND_expression AND_AND • marker_M inclusive_OR_expression

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 219


State 166

    1 marker_M: ε •
   66 logical_OR_expression: logical_OR_expression OR_OR • marker_M logical_AND_expression

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 220


State 167

   68 conditional_expression: logical_OR_expression guard_N • Q_MARK marker_M expression guard_N COLON marker_M conditional_expression

    Q_MARK  shift, and go to state 221


State 168

  208 function_definition: declaration_specifiers declarator declaration_list_opt enter_func create_label • LF_BRACE block_item_list_opt RT_BRACE

    LF_BRACE  shift, and go to state 222


State 169

  136 direct_declarator: LF_PRNTH declarator RT_PRNTH •

    $default  reduce using rule 136 (direct_declarator)


State 170

  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  139 direct_declarator: direct_declarator LF_SQBR STATIC • type_qualifier_list_opt assignment_expression RT_SQBR
  144 type_qualifier_list_opt: • type_qualifier_list
  145                        | ε •  [IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, SIZEOF, LF_PRNTH, PLUS_PLUS, MINUS_MINUS, AMPRSND, ASTERIX, PLUS, MINUS, TILDE, EXCLAIM]
  150 type_qualifier_list: • type_qualifier
  151                    | • type_qualifier_list type_qualifier

    RESTRICT  shift, and go to state 4
    VOLATILE  shift, and go to state 10
    CONST     shift, and go to state 13

    $default  reduce using rule 145 (type_qualifier_list_opt)

    type_qualifier           go to state 49
    type_qualifier_list_opt  go to state 223
    type_qualifier_list      go to state 51


State 171

  146 assignment_expression_opt: assignment_expression •

    $default  reduce using rule 146 (assignment_expression_opt)


State 172

  138 direct_declarator: direct_declarator LF_SQBR assignment_expression_opt • RT_SQBR

    RT_SQBR  shift, and go to state 224


State 173

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  137 direct_declarator: direct_declarator LF_SQBR type_qualifier_list • assignment_expression_opt RT_SQBR
  140                  | direct_declarator LF_SQBR type_qualifier_list • STATIC assignment_expression RT_SQBR
  146 assignment_expression_opt: • assignment_expression
  147                          | ε •  [RT_SQBR]
  151 type_qualifier_list: type_qualifier_list • type_qualifier

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    STATIC              shift, and go to state 225
    RESTRICT            shift, and go to state 4
    VOLATILE            shift, and go to state 10
    CONST               shift, and go to state 13
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 147 (assignment_expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 171
    type_qualifier             go to state 66
    assignment_expression_opt  go to state 226


State 174

  158 identifier_list: IDENTIFIER •

    $default  reduce using rule 158 (identifier_list)


State 175

   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE
  141 direct_declarator: direct_declarator LF_PRNTH enter_func • parameter_type_list RT_PRNTH
  143                  | direct_declarator LF_PRNTH enter_func • RT_PRNTH
  152 parameter_type_list: • parameter_list
  153                    | • parameter_list COMMA DOT_DOT_DOT
  154 parameter_list: • parameter_declaration
  155               | • parameter_list COMMA parameter_declaration
  156 parameter_declaration: • declaration_specifiers declarator
  157                      | • declaration_specifiers

    AUTO       shift, and go to state 1
    STATIC     shift, and go to state 2
    ENUM       shift, and go to state 3
    RESTRICT   shift, and go to state 4
    UNSIGNED   shift, and go to state 5
    EXTERN     shift, and go to state 6
    VOID       shift, and go to state 7
    FLOAT      shift, and go to state 8
    SHORT      shift, and go to state 9
    VOLATILE   shift, and go to state 10
    CHAR       shift, and go to state 11
    SIGNED     shift, and go to state 12
    CONST      shift, and go to state 13
    BOOL       shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21
    RT_PRNTH   shift, and go to state 227

    declaration_specifiers   go to state 228
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_type_list      go to state 229
    parameter_list           go to state 230
    parameter_declaration    go to state 231


State 176

  142 direct_declarator: direct_declarator LF_PRNTH identifier_list • RT_PRNTH
  159 identifier_list: identifier_list • COMMA IDENTIFIER

    RT_PRNTH  shift, and go to state 232
    COMMA     shift, and go to state 233


State 177

   84 constant_expression: conditional_expression •

    $default  reduce using rule 84 (constant_expression)


State 178

  127 enumerator: IDENTIFIER EQ constant_expression •

    $default  reduce using rule 127 (enumerator)


State 179

  120 enum_specifier: ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE •

    $default  reduce using rule 120 (enum_specifier)


State 180

  125 enumerator_list: enumerator_list COMMA enumerator •

    $default  reduce using rule 125 (enumerator_list)


State 181

   19 postfix_expression: LF_PRNTH type_name • RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | LF_PRNTH type_name • RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   30 unary_expression: SIZEOF LF_PRNTH type_name • RT_PRNTH

    RT_PRNTH  shift, and go to state 234


State 182

   11 primary_expression: LF_PRNTH expression RT_PRNTH •

    $default  reduce using rule 11 (primary_expression)


State 183

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   83 expression: expression COMMA • assignment_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 235


State 184

  117 specifier_qualifier_list_opt: specifier_qualifier_list •

    $default  reduce using rule 117 (specifier_qualifier_list_opt)


State 185

  115 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt •

    $default  reduce using rule 115 (specifier_qualifier_list)


State 186

  116 specifier_qualifier_list: type_qualifier specifier_qualifier_list_opt •

    $default  reduce using rule 116 (specifier_qualifier_list)


State 187

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   19                   | LF_PRNTH type_name RT_PRNTH • LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   20                   | LF_PRNTH type_name RT_PRNTH • LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   38                | LF_PRNTH type_name RT_PRNTH • cast_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 236
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression  go to state 85
    postfix_expression  go to state 86
    unary_expression    go to state 147
    unary_operator      go to state 88
    cast_expression     go to state 237


State 188

  171 designator: LF_SQBR constant_expression • RT_SQBR

    RT_SQBR  shift, and go to state 238


State 189

  172 designator: DOT IDENTIFIER •

    $default  reduce using rule 172 (designator)


State 190

  162 initializer: LF_BRACE initializer_list RT_BRACE •

    $default  reduce using rule 162 (initializer)


State 191

  163 initializer: LF_BRACE initializer_list COMMA • RT_BRACE
  165 initializer_list: initializer_list COMMA • designation_opt initializer
  166 designation_opt: • designation
  167                | ε •  [IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, SIZEOF, LF_PRNTH, LF_BRACE, PLUS_PLUS, MINUS_MINUS, AMPRSND, ASTERIX, PLUS, MINUS, TILDE, EXCLAIM]
  168 designation: • designator_list EQ
  169 designator_list: • designator
  170                | • designator_list designator
  171 designator: • LF_SQBR constant_expression RT_SQBR
  172           | • DOT IDENTIFIER

    LF_SQBR   shift, and go to state 119
    RT_BRACE  shift, and go to state 239
    DOT       shift, and go to state 120

    $default  reduce using rule 167 (designation_opt)

    designation_opt  go to state 240
    designation      go to state 123
    designator_list  go to state 124
    designator       go to state 125


State 192

  164 initializer_list: designation_opt initializer •

    $default  reduce using rule 164 (initializer_list)


State 193

  168 designation: designator_list EQ •

    $default  reduce using rule 168 (designation)


State 194

  170 designator_list: designator_list designator •

    $default  reduce using rule 170 (designator_list)


State 195

   19 postfix_expression: LF_PRNTH type_name • RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | LF_PRNTH type_name • RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE

    RT_PRNTH  shift, and go to state 241


State 196

   13 postfix_expression: postfix_expression LF_SQBR expression • RT_SQBR
   83 expression: expression • COMMA assignment_expression

    RT_SQBR  shift, and go to state 242
    COMMA    shift, and go to state 183


State 197

   14 postfix_expression: postfix_expression LF_PRNTH argument_expression_list_opt • RT_PRNTH

    RT_PRNTH  shift, and go to state 243


State 198

   21 argument_expression_list_opt: argument_expression_list •  [RT_PRNTH]
   24 argument_expression_list: argument_expression_list • COMMA assignment_expression

    COMMA  shift, and go to state 244

    $default  reduce using rule 21 (argument_expression_list_opt)


State 199

   23 argument_expression_list: assignment_expression •

    $default  reduce using rule 23 (argument_expression_list)


State 200

   15 postfix_expression: postfix_expression DOT IDENTIFIER •

    $default  reduce using rule 15 (postfix_expression)


State 201

   16 postfix_expression: postfix_expression ARROW IDENTIFIER •

    $default  reduce using rule 16 (postfix_expression)


State 202

   70 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 70 (assignment_expression)


State 203

   40 multiplicative_expression: multiplicative_expression ASTERIX cast_expression •

    $default  reduce using rule 40 (multiplicative_expression)


State 204

   41 multiplicative_expression: multiplicative_expression SLASH cast_expression •

    $default  reduce using rule 41 (multiplicative_expression)


State 205

   42 multiplicative_expression: multiplicative_expression PRCNT cast_expression •

    $default  reduce using rule 42 (multiplicative_expression)


State 206

   40 multiplicative_expression: multiplicative_expression • ASTERIX cast_expression
   41                          | multiplicative_expression • SLASH cast_expression
   42                          | multiplicative_expression • PRCNT cast_expression
   44 additive_expression: additive_expression PLUS multiplicative_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, PLUS, MINUS, L_SHFT, R_SHFT, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    ASTERIX  shift, and go to state 149
    SLASH    shift, and go to state 150
    PRCNT    shift, and go to state 151

    $default  reduce using rule 44 (additive_expression)


State 207

   40 multiplicative_expression: multiplicative_expression • ASTERIX cast_expression
   41                          | multiplicative_expression • SLASH cast_expression
   42                          | multiplicative_expression • PRCNT cast_expression
   45 additive_expression: additive_expression MINUS multiplicative_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, PLUS, MINUS, L_SHFT, R_SHFT, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    ASTERIX  shift, and go to state 149
    SLASH    shift, and go to state 150
    PRCNT    shift, and go to state 151

    $default  reduce using rule 45 (additive_expression)


State 208

   44 additive_expression: additive_expression • PLUS multiplicative_expression
   45                    | additive_expression • MINUS multiplicative_expression
   47 shift_expression: shift_expression L_SHFT additive_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, L_SHFT, R_SHFT, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    PLUS   shift, and go to state 152
    MINUS  shift, and go to state 153

    $default  reduce using rule 47 (shift_expression)


State 209

   44 additive_expression: additive_expression • PLUS multiplicative_expression
   45                    | additive_expression • MINUS multiplicative_expression
   48 shift_expression: shift_expression R_SHFT additive_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, L_SHFT, R_SHFT, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    PLUS   shift, and go to state 152
    MINUS  shift, and go to state 153

    $default  reduce using rule 48 (shift_expression)


State 210

   47 shift_expression: shift_expression • L_SHFT additive_expression
   48                 | shift_expression • R_SHFT additive_expression
   50 relational_expression: relational_expression LESS_TH shift_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    L_SHFT  shift, and go to state 154
    R_SHFT  shift, and go to state 155

    $default  reduce using rule 50 (relational_expression)


State 211

   47 shift_expression: shift_expression • L_SHFT additive_expression
   48                 | shift_expression • R_SHFT additive_expression
   51 relational_expression: relational_expression MORE_TH shift_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    L_SHFT  shift, and go to state 154
    R_SHFT  shift, and go to state 155

    $default  reduce using rule 51 (relational_expression)


State 212

   47 shift_expression: shift_expression • L_SHFT additive_expression
   48                 | shift_expression • R_SHFT additive_expression
   52 relational_expression: relational_expression LESS_EQ shift_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    L_SHFT  shift, and go to state 154
    R_SHFT  shift, and go to state 155

    $default  reduce using rule 52 (relational_expression)


State 213

   47 shift_expression: shift_expression • L_SHFT additive_expression
   48                 | shift_expression • R_SHFT additive_expression
   53 relational_expression: relational_expression MORE_EQ shift_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    L_SHFT  shift, and go to state 154
    R_SHFT  shift, and go to state 155

    $default  reduce using rule 53 (relational_expression)


State 214

   50 relational_expression: relational_expression • LESS_TH shift_expression
   51                      | relational_expression • MORE_TH shift_expression
   52                      | relational_expression • LESS_EQ shift_expression
   53                      | relational_expression • MORE_EQ shift_expression
   55 equality_expression: equality_expression EQ_EQ relational_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    LESS_TH  shift, and go to state 156
    MORE_TH  shift, and go to state 157
    LESS_EQ  shift, and go to state 158
    MORE_EQ  shift, and go to state 159

    $default  reduce using rule 55 (equality_expression)


State 215

   50 relational_expression: relational_expression • LESS_TH shift_expression
   51                      | relational_expression • MORE_TH shift_expression
   52                      | relational_expression • LESS_EQ shift_expression
   53                      | relational_expression • MORE_EQ shift_expression
   56 equality_expression: equality_expression NOT_EQ relational_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    LESS_TH  shift, and go to state 156
    MORE_TH  shift, and go to state 157
    LESS_EQ  shift, and go to state 158
    MORE_EQ  shift, and go to state 159

    $default  reduce using rule 56 (equality_expression)


State 216

   55 equality_expression: equality_expression • EQ_EQ relational_expression
   56                    | equality_expression • NOT_EQ relational_expression
   58 AND_expression: AND_expression AMPRSND equality_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    EQ_EQ   shift, and go to state 160
    NOT_EQ  shift, and go to state 161

    $default  reduce using rule 58 (AND_expression)


State 217

   58 AND_expression: AND_expression • AMPRSND equality_expression
   60 exclusive_OR_expression: exclusive_OR_expression CAP AND_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    AMPRSND  shift, and go to state 162

    $default  reduce using rule 60 (exclusive_OR_expression)


State 218

   60 exclusive_OR_expression: exclusive_OR_expression • CAP AND_expression
   62 inclusive_OR_expression: inclusive_OR_expression PIPE exclusive_OR_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    CAP  shift, and go to state 163

    $default  reduce using rule 62 (inclusive_OR_expression)


State 219

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   64 logical_AND_expression: logical_AND_expression AND_AND marker_M • inclusive_OR_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 245


State 220

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   66 logical_OR_expression: logical_OR_expression OR_OR marker_M • logical_AND_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 246


State 221

    1 marker_M: ε •
   68 conditional_expression: logical_OR_expression guard_N Q_MARK • marker_M expression guard_N COLON marker_M conditional_expression

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 247


State 222

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
   85 declaration: • declaration_specifiers init_declarator_list_opt SEMICOLON
   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  183 block_item_list_opt: • block_item_list
  184                    | ε •  [RT_BRACE]
  185 block_item_list: • block_item
  186                | • block_item_list marker_M block_item
  187 block_item: • declaration
  188           | • statement
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON
  208 function_definition: declaration_specifiers declarator declaration_list_opt enter_func create_label LF_BRACE • block_item_list_opt RT_BRACE

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    AUTO                shift, and go to state 1
    STATIC              shift, and go to state 2
    ENUM                shift, and go to state 3
    RESTRICT            shift, and go to state 4
    UNSIGNED            shift, and go to state 5
    BREAK               shift, and go to state 249
    EXTERN              shift, and go to state 6
    RETURN              shift, and go to state 250
    VOID                shift, and go to state 7
    CASE                shift, and go to state 251
    FLOAT               shift, and go to state 8
    SHORT               shift, and go to state 9
    VOLATILE            shift, and go to state 10
    CHAR                shift, and go to state 11
    FOR                 shift, and go to state 252
    SIGNED              shift, and go to state 12
    WHILE               shift, and go to state 253
    CONST               shift, and go to state 13
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    BOOL                shift, and go to state 14
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    COMPLEX             shift, and go to state 15
    DEFAULT             shift, and go to state 257
    INLINE              shift, and go to state 16
    IMAGINARY           shift, and go to state 17
    DO                  shift, and go to state 258
    INT                 shift, and go to state 18
    SWITCH              shift, and go to state 259
    DOUBLE              shift, and go to state 19
    LONG                shift, and go to state 20
    REGISTER            shift, and go to state 21
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    SEMICOLON  reduce using rule 191 (expression_opt)
    $default   reduce using rule 184 (block_item_list_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    declaration                go to state 262
    declaration_specifiers     go to state 56
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 263
    labeled_statement          go to state 264
    compound_statement         go to state 265
    block_item_list_opt        go to state 266
    block_item_list            go to state 267
    block_item                 go to state 268
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 223

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
  139 direct_declarator: direct_declarator LF_SQBR STATIC type_qualifier_list_opt • assignment_expression RT_SQBR

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 274


State 224

  138 direct_declarator: direct_declarator LF_SQBR assignment_expression_opt RT_SQBR •

    $default  reduce using rule 138 (direct_declarator)


State 225

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
  140 direct_declarator: direct_declarator LF_SQBR type_qualifier_list STATIC • assignment_expression RT_SQBR

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 275


State 226

  137 direct_declarator: direct_declarator LF_SQBR type_qualifier_list assignment_expression_opt • RT_SQBR

    RT_SQBR  shift, and go to state 276


State 227

  143 direct_declarator: direct_declarator LF_PRNTH enter_func RT_PRNTH •

    $default  reduce using rule 143 (direct_declarator)


State 228

  132 declarator: • pointer_opt direct_declarator
  133 pointer_opt: • pointer
  134            | ε •  [IDENTIFIER, LF_PRNTH]
  148 pointer: • ASTERIX type_qualifier_list_opt
  149        | • ASTERIX type_qualifier_list_opt pointer
  156 parameter_declaration: declaration_specifiers • declarator
  157                      | declaration_specifiers •  [RT_PRNTH, COMMA]

    ASTERIX  shift, and go to state 34

    RT_PRNTH  reduce using rule 157 (parameter_declaration)
    COMMA     reduce using rule 157 (parameter_declaration)
    $default  reduce using rule 134 (pointer_opt)

    declarator   go to state 277
    pointer_opt  go to state 39
    pointer      go to state 40


State 229

  141 direct_declarator: direct_declarator LF_PRNTH enter_func parameter_type_list • RT_PRNTH

    RT_PRNTH  shift, and go to state 278


State 230

  152 parameter_type_list: parameter_list •  [RT_PRNTH]
  153                    | parameter_list • COMMA DOT_DOT_DOT
  155 parameter_list: parameter_list • COMMA parameter_declaration

    COMMA  shift, and go to state 279

    $default  reduce using rule 152 (parameter_type_list)


State 231

  154 parameter_list: parameter_declaration •

    $default  reduce using rule 154 (parameter_list)


State 232

  142 direct_declarator: direct_declarator LF_PRNTH identifier_list RT_PRNTH •

    $default  reduce using rule 142 (direct_declarator)


State 233

  159 identifier_list: identifier_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 280


State 234

   19 postfix_expression: LF_PRNTH type_name RT_PRNTH • LF_BRACE initializer_list RT_BRACE
   20                   | LF_PRNTH type_name RT_PRNTH • LF_BRACE initializer_list COMMA RT_BRACE
   30 unary_expression: SIZEOF LF_PRNTH type_name RT_PRNTH •  [RT_SQBR, RT_PRNTH, RT_BRACE, AMPRSND, ASTERIX, PLUS, MINUS, SLASH, PRCNT, L_SHFT, R_SHFT, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, EQ, TIMES_EQ, SLASH_EQ, PRCNT_EQ, PLUS_EQ, MINUS_EQ, LS_EQ, RS_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA]

    LF_BRACE  shift, and go to state 236

    $default  reduce using rule 30 (unary_expression)


State 235

   83 expression: expression COMMA assignment_expression •

    $default  reduce using rule 83 (expression)


State 236

   19 postfix_expression: LF_PRNTH type_name RT_PRNTH LF_BRACE • initializer_list RT_BRACE
   20                   | LF_PRNTH type_name RT_PRNTH LF_BRACE • initializer_list COMMA RT_BRACE
  164 initializer_list: • designation_opt initializer
  165                 | • initializer_list COMMA designation_opt initializer
  166 designation_opt: • designation
  167                | ε •  [IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, SIZEOF, LF_PRNTH, LF_BRACE, PLUS_PLUS, MINUS_MINUS, AMPRSND, ASTERIX, PLUS, MINUS, TILDE, EXCLAIM]
  168 designation: • designator_list EQ
  169 designator_list: • designator
  170                | • designator_list designator
  171 designator: • LF_SQBR constant_expression RT_SQBR
  172           | • DOT IDENTIFIER

    LF_SQBR  shift, and go to state 119
    DOT      shift, and go to state 120

    $default  reduce using rule 167 (designation_opt)

    initializer_list  go to state 281
    designation_opt   go to state 122
    designation       go to state 123
    designator_list   go to state 124
    designator        go to state 125


State 237

   38 cast_expression: LF_PRNTH type_name RT_PRNTH cast_expression •

    $default  reduce using rule 38 (cast_expression)


State 238

  171 designator: LF_SQBR constant_expression RT_SQBR •

    $default  reduce using rule 171 (designator)


State 239

  163 initializer: LF_BRACE initializer_list COMMA RT_BRACE •

    $default  reduce using rule 163 (initializer)


State 240

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
  161 initializer: • assignment_expression
  162            | • LF_BRACE initializer_list RT_BRACE
  163            | • LF_BRACE initializer_list COMMA RT_BRACE
  165 initializer_list: initializer_list COMMA designation_opt • initializer

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 76
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 101
    initializer                go to state 282


State 241

   19 postfix_expression: LF_PRNTH type_name RT_PRNTH • LF_BRACE initializer_list RT_BRACE
   20                   | LF_PRNTH type_name RT_PRNTH • LF_BRACE initializer_list COMMA RT_BRACE

    LF_BRACE  shift, and go to state 236


State 242

   13 postfix_expression: postfix_expression LF_SQBR expression RT_SQBR •

    $default  reduce using rule 13 (postfix_expression)


State 243

   14 postfix_expression: postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH •

    $default  reduce using rule 14 (postfix_expression)


State 244

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   24 argument_expression_list: argument_expression_list COMMA • assignment_expression
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 283


State 245

   62 inclusive_OR_expression: inclusive_OR_expression • PIPE exclusive_OR_expression
   64 logical_AND_expression: logical_AND_expression AND_AND marker_M inclusive_OR_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, AND_AND, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    PIPE  shift, and go to state 164

    $default  reduce using rule 64 (logical_AND_expression)


State 246

   64 logical_AND_expression: logical_AND_expression • AND_AND marker_M inclusive_OR_expression
   66 logical_OR_expression: logical_OR_expression OR_OR marker_M logical_AND_expression •  [RT_SQBR, RT_PRNTH, RT_BRACE, OR_OR, Q_MARK, COLON, SEMICOLON, COMMA]

    AND_AND  shift, and go to state 165

    $default  reduce using rule 66 (logical_OR_expression)


State 247

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   68                       | logical_OR_expression guard_N Q_MARK marker_M • expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 284


State 248

    6 primary_expression: IDENTIFIER •  [LF_SQBR, LF_PRNTH, DOT, ARROW, PLUS_PLUS, MINUS_MINUS, AMPRSND, ASTERIX, PLUS, MINUS, SLASH, PRCNT, L_SHFT, R_SHFT, LESS_TH, MORE_TH, LESS_EQ, MORE_EQ, EQ_EQ, NOT_EQ, CAP, PIPE, AND_AND, OR_OR, Q_MARK, SEMICOLON, EQ, TIMES_EQ, SLASH_EQ, PRCNT_EQ, PLUS_EQ, MINUS_EQ, LS_EQ, RS_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA]
  179 labeled_statement: IDENTIFIER • COLON statement

    COLON  shift, and go to state 285

    $default  reduce using rule 6 (primary_expression)


State 249

  201 jump_statement: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 286


State 250

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  202 jump_statement: RETURN • expression SEMICOLON
  203               | RETURN • SEMICOLON

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84
    SEMICOLON           shift, and go to state 287

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 288


State 251

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   84 constant_expression: • conditional_expression
  180 labeled_statement: CASE • constant_expression COLON statement

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 177
    constant_expression        go to state 289


State 252

  197 iteration_statement: FOR • LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | FOR • LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement

    LF_PRNTH  shift, and go to state 290


State 253

    1 marker_M: ε •
  195 iteration_statement: WHILE • marker_M LF_PRNTH expression RT_PRNTH marker_M statement

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 291


State 254

  199 jump_statement: GOTO • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 292


State 255

  200 jump_statement: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 293


State 256

  192 selection_statement: IF • LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | IF • LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement

    LF_PRNTH  shift, and go to state 294


State 257

  181 labeled_statement: DEFAULT • COLON statement

    COLON  shift, and go to state 295


State 258

    1 marker_M: ε •
  196 iteration_statement: DO • marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 296


State 259

  194 selection_statement: SWITCH • LF_PRNTH expression RT_PRNTH statement

    LF_PRNTH  shift, and go to state 297


State 260

    5 enter_block: ε •
  182 compound_statement: LF_BRACE • enter_block block_item_list_opt RT_BRACE

    $default  reduce using rule 5 (enter_block)

    enter_block  go to state 298


State 261

   83 expression: expression • COMMA assignment_expression
  190 expression_opt: expression •  [RT_PRNTH, SEMICOLON]

    COMMA  shift, and go to state 183

    $default  reduce using rule 190 (expression_opt)


State 262

  187 block_item: declaration •

    $default  reduce using rule 187 (block_item)


State 263

  188 block_item: statement •

    $default  reduce using rule 188 (block_item)


State 264

  173 statement: labeled_statement •

    $default  reduce using rule 173 (statement)


State 265

  174 statement: compound_statement •

    $default  reduce using rule 174 (statement)


State 266

  208 function_definition: declaration_specifiers declarator declaration_list_opt enter_func create_label LF_BRACE block_item_list_opt • RT_BRACE

    RT_BRACE  shift, and go to state 299


State 267

    1 marker_M: ε •  [IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, AUTO, STATIC, ENUM, RESTRICT, UNSIGNED, BREAK, EXTERN, RETURN, VOID, CASE, FLOAT, SHORT, VOLATILE, CHAR, FOR, SIGNED, WHILE, CONST, GOTO, SIZEOF, BOOL, CONTINUE, IF, COMPLEX, DEFAULT, INLINE, IMAGINARY, DO, INT, SWITCH, DOUBLE, LONG, REGISTER, LF_PRNTH, LF_BRACE, PLUS_PLUS, MINUS_MINUS, AMPRSND, ASTERIX, PLUS, MINUS, TILDE, EXCLAIM, SEMICOLON]
  183 block_item_list_opt: block_item_list •  [RT_BRACE]
  186 block_item_list: block_item_list • marker_M block_item

    RT_BRACE  reduce using rule 183 (block_item_list_opt)
    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 300


State 268

  185 block_item_list: block_item •

    $default  reduce using rule 185 (block_item_list)


State 269

  175 statement: expression_statement •

    $default  reduce using rule 175 (statement)


State 270

  189 expression_statement: expression_opt • SEMICOLON

    SEMICOLON  shift, and go to state 301


State 271

  176 statement: selection_statement •

    $default  reduce using rule 176 (statement)


State 272

  177 statement: iteration_statement •

    $default  reduce using rule 177 (statement)


State 273

  178 statement: jump_statement •

    $default  reduce using rule 178 (statement)


State 274

  139 direct_declarator: direct_declarator LF_SQBR STATIC type_qualifier_list_opt assignment_expression • RT_SQBR

    RT_SQBR  shift, and go to state 302


State 275

  140 direct_declarator: direct_declarator LF_SQBR type_qualifier_list STATIC assignment_expression • RT_SQBR

    RT_SQBR  shift, and go to state 303


State 276

  137 direct_declarator: direct_declarator LF_SQBR type_qualifier_list assignment_expression_opt RT_SQBR •

    $default  reduce using rule 137 (direct_declarator)


State 277

  156 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 156 (parameter_declaration)


State 278

  141 direct_declarator: direct_declarator LF_PRNTH enter_func parameter_type_list RT_PRNTH •

    $default  reduce using rule 141 (direct_declarator)


State 279

   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE
  153 parameter_type_list: parameter_list COMMA • DOT_DOT_DOT
  155 parameter_list: parameter_list COMMA • parameter_declaration
  156 parameter_declaration: • declaration_specifiers declarator
  157                      | • declaration_specifiers

    AUTO         shift, and go to state 1
    STATIC       shift, and go to state 2
    ENUM         shift, and go to state 3
    RESTRICT     shift, and go to state 4
    UNSIGNED     shift, and go to state 5
    EXTERN       shift, and go to state 6
    VOID         shift, and go to state 7
    FLOAT        shift, and go to state 8
    SHORT        shift, and go to state 9
    VOLATILE     shift, and go to state 10
    CHAR         shift, and go to state 11
    SIGNED       shift, and go to state 12
    CONST        shift, and go to state 13
    BOOL         shift, and go to state 14
    COMPLEX      shift, and go to state 15
    INLINE       shift, and go to state 16
    IMAGINARY    shift, and go to state 17
    INT          shift, and go to state 18
    DOUBLE       shift, and go to state 19
    LONG         shift, and go to state 20
    REGISTER     shift, and go to state 21
    DOT_DOT_DOT  shift, and go to state 304

    declaration_specifiers   go to state 228
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_declaration    go to state 305


State 280

  159 identifier_list: identifier_list COMMA IDENTIFIER •

    $default  reduce using rule 159 (identifier_list)


State 281

   19 postfix_expression: LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list • RT_BRACE
   20                   | LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list • COMMA RT_BRACE
  165 initializer_list: initializer_list • COMMA designation_opt initializer

    RT_BRACE  shift, and go to state 306
    COMMA     shift, and go to state 307


State 282

  165 initializer_list: initializer_list COMMA designation_opt initializer •

    $default  reduce using rule 165 (initializer_list)


State 283

   24 argument_expression_list: argument_expression_list COMMA assignment_expression •

    $default  reduce using rule 24 (argument_expression_list)


State 284

    2 guard_N: ε •  [COLON]
   68 conditional_expression: logical_OR_expression guard_N Q_MARK marker_M expression • guard_N COLON marker_M conditional_expression
   83 expression: expression • COMMA assignment_expression

    COMMA  shift, and go to state 183

    $default  reduce using rule 2 (guard_N)

    guard_N  go to state 308


State 285

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  179                  | IDENTIFIER COLON • statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    BREAK               shift, and go to state 249
    RETURN              shift, and go to state 250
    CASE                shift, and go to state 251
    FOR                 shift, and go to state 252
    WHILE               shift, and go to state 253
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    DEFAULT             shift, and go to state 257
    DO                  shift, and go to state 258
    SWITCH              shift, and go to state 259
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    statement                  go to state 309
    labeled_statement          go to state 264
    compound_statement         go to state 265
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 286

  201 jump_statement: BREAK SEMICOLON •

    $default  reduce using rule 201 (jump_statement)


State 287

  203 jump_statement: RETURN SEMICOLON •

    $default  reduce using rule 203 (jump_statement)


State 288

   83 expression: expression • COMMA assignment_expression
  202 jump_statement: RETURN expression • SEMICOLON

    SEMICOLON  shift, and go to state 310
    COMMA      shift, and go to state 183


State 289

  180 labeled_statement: CASE constant_expression • COLON statement

    COLON  shift, and go to state 311


State 290

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
   85 declaration: • declaration_specifiers init_declarator_list_opt SEMICOLON
   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  197 iteration_statement: FOR LF_PRNTH • expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | FOR LF_PRNTH • declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    AUTO                shift, and go to state 1
    STATIC              shift, and go to state 2
    ENUM                shift, and go to state 3
    RESTRICT            shift, and go to state 4
    UNSIGNED            shift, and go to state 5
    EXTERN              shift, and go to state 6
    VOID                shift, and go to state 7
    FLOAT               shift, and go to state 8
    SHORT               shift, and go to state 9
    VOLATILE            shift, and go to state 10
    CHAR                shift, and go to state 11
    SIGNED              shift, and go to state 12
    CONST               shift, and go to state 13
    SIZEOF              shift, and go to state 74
    BOOL                shift, and go to state 14
    COMPLEX             shift, and go to state 15
    INLINE              shift, and go to state 16
    IMAGINARY           shift, and go to state 17
    INT                 shift, and go to state 18
    DOUBLE              shift, and go to state 19
    LONG                shift, and go to state 20
    REGISTER            shift, and go to state 21
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    declaration                go to state 312
    declaration_specifiers     go to state 56
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    expression_opt             go to state 313


State 291

  195 iteration_statement: WHILE marker_M • LF_PRNTH expression RT_PRNTH marker_M statement

    LF_PRNTH  shift, and go to state 314


State 292

  199 jump_statement: GOTO IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 315


State 293

  200 jump_statement: CONTINUE SEMICOLON •

    $default  reduce using rule 200 (jump_statement)


State 294

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  192 selection_statement: IF LF_PRNTH • expression RT_PRNTH marker_M statement guard_N
  193                    | IF LF_PRNTH • expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 316


State 295

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  181                  | DEFAULT COLON • statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    BREAK               shift, and go to state 249
    RETURN              shift, and go to state 250
    CASE                shift, and go to state 251
    FOR                 shift, and go to state 252
    WHILE               shift, and go to state 253
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    DEFAULT             shift, and go to state 257
    DO                  shift, and go to state 258
    SWITCH              shift, and go to state 259
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    statement                  go to state 317
    labeled_statement          go to state 264
    compound_statement         go to state 265
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 296

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  196                    | DO marker_M • statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    BREAK               shift, and go to state 249
    RETURN              shift, and go to state 250
    CASE                shift, and go to state 251
    FOR                 shift, and go to state 252
    WHILE               shift, and go to state 253
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    DEFAULT             shift, and go to state 257
    DO                  shift, and go to state 258
    SWITCH              shift, and go to state 259
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    statement                  go to state 318
    labeled_statement          go to state 264
    compound_statement         go to state 265
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 297

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  194 selection_statement: SWITCH LF_PRNTH • expression RT_PRNTH statement

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 319


State 298

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
   85 declaration: • declaration_specifiers init_declarator_list_opt SEMICOLON
   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  182                   | LF_BRACE enter_block • block_item_list_opt RT_BRACE
  183 block_item_list_opt: • block_item_list
  184                    | ε •  [RT_BRACE]
  185 block_item_list: • block_item
  186                | • block_item_list marker_M block_item
  187 block_item: • declaration
  188           | • statement
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    AUTO                shift, and go to state 1
    STATIC              shift, and go to state 2
    ENUM                shift, and go to state 3
    RESTRICT            shift, and go to state 4
    UNSIGNED            shift, and go to state 5
    BREAK               shift, and go to state 249
    EXTERN              shift, and go to state 6
    RETURN              shift, and go to state 250
    VOID                shift, and go to state 7
    CASE                shift, and go to state 251
    FLOAT               shift, and go to state 8
    SHORT               shift, and go to state 9
    VOLATILE            shift, and go to state 10
    CHAR                shift, and go to state 11
    FOR                 shift, and go to state 252
    SIGNED              shift, and go to state 12
    WHILE               shift, and go to state 253
    CONST               shift, and go to state 13
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    BOOL                shift, and go to state 14
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    COMPLEX             shift, and go to state 15
    DEFAULT             shift, and go to state 257
    INLINE              shift, and go to state 16
    IMAGINARY           shift, and go to state 17
    DO                  shift, and go to state 258
    INT                 shift, and go to state 18
    SWITCH              shift, and go to state 259
    DOUBLE              shift, and go to state 19
    LONG                shift, and go to state 20
    REGISTER            shift, and go to state 21
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    SEMICOLON  reduce using rule 191 (expression_opt)
    $default   reduce using rule 184 (block_item_list_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    declaration                go to state 262
    declaration_specifiers     go to state 56
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 263
    labeled_statement          go to state 264
    compound_statement         go to state 265
    block_item_list_opt        go to state 320
    block_item_list            go to state 267
    block_item                 go to state 268
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 299

  208 function_definition: declaration_specifiers declarator declaration_list_opt enter_func create_label LF_BRACE block_item_list_opt RT_BRACE •

    $default  reduce using rule 208 (function_definition)


State 300

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
   85 declaration: • declaration_specifiers init_declarator_list_opt SEMICOLON
   88 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   89                       | • type_specifier declaration_specifiers_opt
   90                       | • type_qualifier declaration_specifiers_opt
   91                       | • function_specifier declaration_specifiers_opt
   98 storage_class_specifier: • EXTERN
   99                        | • STATIC
  100                        | • AUTO
  101                        | • REGISTER
  102 type_specifier: • VOID
  103               | • CHAR
  104               | • SHORT
  105               | • INT
  106               | • LONG
  107               | • FLOAT
  108               | • DOUBLE
  109               | • SIGNED
  110               | • UNSIGNED
  111               | • BOOL
  112               | • COMPLEX
  113               | • IMAGINARY
  114               | • enum_specifier
  119 enum_specifier: • ENUM identifier_opt LF_BRACE enumerator_list RT_BRACE
  120               | • ENUM identifier_opt LF_BRACE enumerator_list COMMA RT_BRACE
  121               | • ENUM IDENTIFIER
  128 type_qualifier: • CONST
  129               | • RESTRICT
  130               | • VOLATILE
  131 function_specifier: • INLINE
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  186 block_item_list: block_item_list marker_M • block_item
  187 block_item: • declaration
  188           | • statement
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    AUTO                shift, and go to state 1
    STATIC              shift, and go to state 2
    ENUM                shift, and go to state 3
    RESTRICT            shift, and go to state 4
    UNSIGNED            shift, and go to state 5
    BREAK               shift, and go to state 249
    EXTERN              shift, and go to state 6
    RETURN              shift, and go to state 250
    VOID                shift, and go to state 7
    CASE                shift, and go to state 251
    FLOAT               shift, and go to state 8
    SHORT               shift, and go to state 9
    VOLATILE            shift, and go to state 10
    CHAR                shift, and go to state 11
    FOR                 shift, and go to state 252
    SIGNED              shift, and go to state 12
    WHILE               shift, and go to state 253
    CONST               shift, and go to state 13
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    BOOL                shift, and go to state 14
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    COMPLEX             shift, and go to state 15
    DEFAULT             shift, and go to state 257
    INLINE              shift, and go to state 16
    IMAGINARY           shift, and go to state 17
    DO                  shift, and go to state 258
    INT                 shift, and go to state 18
    SWITCH              shift, and go to state 259
    DOUBLE              shift, and go to state 19
    LONG                shift, and go to state 20
    REGISTER            shift, and go to state 21
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    declaration                go to state 262
    declaration_specifiers     go to state 56
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 263
    labeled_statement          go to state 264
    compound_statement         go to state 265
    block_item                 go to state 321
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 301

  189 expression_statement: expression_opt SEMICOLON •

    $default  reduce using rule 189 (expression_statement)


State 302

  139 direct_declarator: direct_declarator LF_SQBR STATIC type_qualifier_list_opt assignment_expression RT_SQBR •

    $default  reduce using rule 139 (direct_declarator)


State 303

  140 direct_declarator: direct_declarator LF_SQBR type_qualifier_list STATIC assignment_expression RT_SQBR •

    $default  reduce using rule 140 (direct_declarator)


State 304

  153 parameter_type_list: parameter_list COMMA DOT_DOT_DOT •

    $default  reduce using rule 153 (parameter_type_list)


State 305

  155 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 155 (parameter_list)


State 306

   19 postfix_expression: LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE •

    $default  reduce using rule 19 (postfix_expression)


State 307

   20 postfix_expression: LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA • RT_BRACE
  165 initializer_list: initializer_list COMMA • designation_opt initializer
  166 designation_opt: • designation
  167                | ε •  [IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, SIZEOF, LF_PRNTH, LF_BRACE, PLUS_PLUS, MINUS_MINUS, AMPRSND, ASTERIX, PLUS, MINUS, TILDE, EXCLAIM]
  168 designation: • designator_list EQ
  169 designator_list: • designator
  170                | • designator_list designator
  171 designator: • LF_SQBR constant_expression RT_SQBR
  172           | • DOT IDENTIFIER

    LF_SQBR   shift, and go to state 119
    RT_BRACE  shift, and go to state 322
    DOT       shift, and go to state 120

    $default  reduce using rule 167 (designation_opt)

    designation_opt  go to state 240
    designation      go to state 123
    designator_list  go to state 124
    designator       go to state 125


State 308

   68 conditional_expression: logical_OR_expression guard_N Q_MARK marker_M expression guard_N • COLON marker_M conditional_expression

    COLON  shift, and go to state 323


State 309

  179 labeled_statement: IDENTIFIER COLON statement •

    $default  reduce using rule 179 (labeled_statement)


State 310

  202 jump_statement: RETURN expression SEMICOLON •

    $default  reduce using rule 202 (jump_statement)


State 311

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  180                  | CASE constant_expression COLON • statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    BREAK               shift, and go to state 249
    RETURN              shift, and go to state 250
    CASE                shift, and go to state 251
    FOR                 shift, and go to state 252
    WHILE               shift, and go to state 253
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    DEFAULT             shift, and go to state 257
    DO                  shift, and go to state 258
    SWITCH              shift, and go to state 259
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    statement                  go to state 324
    labeled_statement          go to state 264
    compound_statement         go to state 265
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 312

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  198 iteration_statement: FOR LF_PRNTH declaration • expression_opt SEMICOLON expression_opt RT_PRNTH statement

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    expression_opt             go to state 325


State 313

  197 iteration_statement: FOR LF_PRNTH expression_opt • SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement

    SEMICOLON  shift, and go to state 326


State 314

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  195 iteration_statement: WHILE marker_M LF_PRNTH • expression RT_PRNTH marker_M statement

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 327


State 315

  199 jump_statement: GOTO IDENTIFIER SEMICOLON •

    $default  reduce using rule 199 (jump_statement)


State 316

   83 expression: expression • COMMA assignment_expression
  192 selection_statement: IF LF_PRNTH expression • RT_PRNTH marker_M statement guard_N
  193                    | IF LF_PRNTH expression • RT_PRNTH marker_M statement guard_N ELSE marker_M statement

    RT_PRNTH  shift, and go to state 328
    COMMA     shift, and go to state 183


State 317

  181 labeled_statement: DEFAULT COLON statement •

    $default  reduce using rule 181 (labeled_statement)


State 318

    1 marker_M: ε •
  196 iteration_statement: DO marker_M statement • marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 329


State 319

   83 expression: expression • COMMA assignment_expression
  194 selection_statement: SWITCH LF_PRNTH expression • RT_PRNTH statement

    RT_PRNTH  shift, and go to state 330
    COMMA     shift, and go to state 183


State 320

  182 compound_statement: LF_BRACE enter_block block_item_list_opt • RT_BRACE

    RT_BRACE  shift, and go to state 331


State 321

  186 block_item_list: block_item_list marker_M block_item •

    $default  reduce using rule 186 (block_item_list)


State 322

   20 postfix_expression: LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE •

    $default  reduce using rule 20 (postfix_expression)


State 323

    1 marker_M: ε •
   68 conditional_expression: logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON • marker_M conditional_expression

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 332


State 324

  180 labeled_statement: CASE constant_expression COLON statement •

    $default  reduce using rule 180 (labeled_statement)


State 325

  198 iteration_statement: FOR LF_PRNTH declaration expression_opt • SEMICOLON expression_opt RT_PRNTH statement

    SEMICOLON  shift, and go to state 333


State 326

    1 marker_M: ε •
  197 iteration_statement: FOR LF_PRNTH expression_opt SEMICOLON • marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 334


State 327

   83 expression: expression • COMMA assignment_expression
  195 iteration_statement: WHILE marker_M LF_PRNTH expression • RT_PRNTH marker_M statement

    RT_PRNTH  shift, and go to state 335
    COMMA     shift, and go to state 183


State 328

    1 marker_M: ε •
  192 selection_statement: IF LF_PRNTH expression RT_PRNTH • marker_M statement guard_N
  193                    | IF LF_PRNTH expression RT_PRNTH • marker_M statement guard_N ELSE marker_M statement

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 336


State 329

  196 iteration_statement: DO marker_M statement marker_M • WHILE LF_PRNTH expression RT_PRNTH SEMICOLON

    WHILE  shift, and go to state 337


State 330

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  194                    | SWITCH LF_PRNTH expression RT_PRNTH • statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    BREAK               shift, and go to state 249
    RETURN              shift, and go to state 250
    CASE                shift, and go to state 251
    FOR                 shift, and go to state 252
    WHILE               shift, and go to state 253
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    DEFAULT             shift, and go to state 257
    DO                  shift, and go to state 258
    SWITCH              shift, and go to state 259
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    statement                  go to state 338
    labeled_statement          go to state 264
    compound_statement         go to state 265
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 331

  182 compound_statement: LF_BRACE enter_block block_item_list_opt RT_BRACE •

    $default  reduce using rule 182 (compound_statement)


State 332

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   68                       | logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M • conditional_expression

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 147
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 339


State 333

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  190 expression_opt: • expression
  191               | ε •  [RT_PRNTH]
  198 iteration_statement: FOR LF_PRNTH declaration expression_opt SEMICOLON • expression_opt RT_PRNTH statement

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    expression_opt             go to state 340


State 334

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  197 iteration_statement: FOR LF_PRNTH expression_opt SEMICOLON marker_M • expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    expression_opt             go to state 341


State 335

    1 marker_M: ε •
  195 iteration_statement: WHILE marker_M LF_PRNTH expression RT_PRNTH • marker_M statement

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 342


State 336

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  192                    | IF LF_PRNTH expression RT_PRNTH marker_M • statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  193                    | IF LF_PRNTH expression RT_PRNTH marker_M • statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    BREAK               shift, and go to state 249
    RETURN              shift, and go to state 250
    CASE                shift, and go to state 251
    FOR                 shift, and go to state 252
    WHILE               shift, and go to state 253
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    DEFAULT             shift, and go to state 257
    DO                  shift, and go to state 258
    SWITCH              shift, and go to state 259
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    statement                  go to state 343
    labeled_statement          go to state 264
    compound_statement         go to state 265
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 337

  196 iteration_statement: DO marker_M statement marker_M WHILE • LF_PRNTH expression RT_PRNTH SEMICOLON

    LF_PRNTH  shift, and go to state 344


State 338

  194 selection_statement: SWITCH LF_PRNTH expression RT_PRNTH statement •

    $default  reduce using rule 194 (selection_statement)


State 339

   68 conditional_expression: logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression •

    $default  reduce using rule 68 (conditional_expression)


State 340

  198 iteration_statement: FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt • RT_PRNTH statement

    RT_PRNTH  shift, and go to state 345


State 341

  197 iteration_statement: FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt • SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement

    SEMICOLON  shift, and go to state 346


State 342

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  195                    | WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M • statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    BREAK               shift, and go to state 249
    RETURN              shift, and go to state 250
    CASE                shift, and go to state 251
    FOR                 shift, and go to state 252
    WHILE               shift, and go to state 253
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    DEFAULT             shift, and go to state 257
    DO                  shift, and go to state 258
    SWITCH              shift, and go to state 259
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    statement                  go to state 347
    labeled_statement          go to state 264
    compound_statement         go to state 265
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 343

    2 guard_N: ε •
  192 selection_statement: IF LF_PRNTH expression RT_PRNTH marker_M statement • guard_N
  193                    | IF LF_PRNTH expression RT_PRNTH marker_M statement • guard_N ELSE marker_M statement

    $default  reduce using rule 2 (guard_N)

    guard_N  go to state 348


State 344

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  196 iteration_statement: DO marker_M statement marker_M WHILE LF_PRNTH • expression RT_PRNTH SEMICOLON

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 349


State 345

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  198                    | FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH • statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    BREAK               shift, and go to state 249
    RETURN              shift, and go to state 250
    CASE                shift, and go to state 251
    FOR                 shift, and go to state 252
    WHILE               shift, and go to state 253
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    DEFAULT             shift, and go to state 257
    DO                  shift, and go to state 258
    SWITCH              shift, and go to state 259
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    statement                  go to state 350
    labeled_statement          go to state 264
    compound_statement         go to state 265
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 346

    1 marker_M: ε •
  197 iteration_statement: FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON • marker_M expression_opt guard_N RT_PRNTH marker_M statement

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 351


State 347

  195 iteration_statement: WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement •

    $default  reduce using rule 195 (iteration_statement)


State 348

  192 selection_statement: IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N •  [IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, AUTO, STATIC, ENUM, RESTRICT, UNSIGNED, BREAK, EXTERN, RETURN, VOID, CASE, FLOAT, SHORT, VOLATILE, CHAR, FOR, SIGNED, WHILE, CONST, GOTO, SIZEOF, BOOL, CONTINUE, IF, COMPLEX, DEFAULT, INLINE, IMAGINARY, DO, INT, SWITCH, DOUBLE, LONG, REGISTER, LF_PRNTH, LF_BRACE, RT_BRACE, PLUS_PLUS, MINUS_MINUS, AMPRSND, ASTERIX, PLUS, MINUS, TILDE, EXCLAIM, SEMICOLON]
  193                    | IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N • ELSE marker_M statement

    ELSE  shift, and go to state 352

    $default  reduce using rule 192 (selection_statement)

    Conflict between rule 192 and token ELSE resolved as shift (%right ELSE).


State 349

   83 expression: expression • COMMA assignment_expression
  196 iteration_statement: DO marker_M statement marker_M WHILE LF_PRNTH expression • RT_PRNTH SEMICOLON

    RT_PRNTH  shift, and go to state 353
    COMMA     shift, and go to state 183


State 350

  198 iteration_statement: FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement •

    $default  reduce using rule 198 (iteration_statement)


State 351

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  190 expression_opt: • expression
  191               | ε •  [RT_PRNTH]
  197 iteration_statement: FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M • expression_opt guard_N RT_PRNTH marker_M statement

    IDENTIFIER          shift, and go to state 69
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    SIZEOF              shift, and go to state 74
    LF_PRNTH            shift, and go to state 75
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    expression_opt             go to state 354


State 352

    1 marker_M: ε •
  193 selection_statement: IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE • marker_M statement

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 355


State 353

  196 iteration_statement: DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH • SEMICOLON

    SEMICOLON  shift, and go to state 356


State 354

    2 guard_N: ε •
  197 iteration_statement: FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt • guard_N RT_PRNTH marker_M statement

    $default  reduce using rule 2 (guard_N)

    guard_N  go to state 357


State 355

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  193                    | IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M • statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    BREAK               shift, and go to state 249
    RETURN              shift, and go to state 250
    CASE                shift, and go to state 251
    FOR                 shift, and go to state 252
    WHILE               shift, and go to state 253
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    DEFAULT             shift, and go to state 257
    DO                  shift, and go to state 258
    SWITCH              shift, and go to state 259
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    statement                  go to state 358
    labeled_statement          go to state 264
    compound_statement         go to state 265
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 356

  196 iteration_statement: DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON •

    $default  reduce using rule 196 (iteration_statement)


State 357

  197 iteration_statement: FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N • RT_PRNTH marker_M statement

    RT_PRNTH  shift, and go to state 359


State 358

  193 selection_statement: IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement •

    $default  reduce using rule 193 (selection_statement)


State 359

    1 marker_M: ε •
  197 iteration_statement: FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH • marker_M statement

    $default  reduce using rule 1 (marker_M)

    marker_M  go to state 360


State 360

    6 primary_expression: • IDENTIFIER
    7                   | • INTEGER_CONSTANT
    8                   | • FLOATING_CONSTANT
    9                   | • CHARACTER_CONSTANT
   10                   | • STRING_LITERAL
   11                   | • LF_PRNTH expression RT_PRNTH
   12 postfix_expression: • primary_expression
   13                   | • postfix_expression LF_SQBR expression RT_SQBR
   14                   | • postfix_expression LF_PRNTH argument_expression_list_opt RT_PRNTH
   15                   | • postfix_expression DOT IDENTIFIER
   16                   | • postfix_expression ARROW IDENTIFIER
   17                   | • postfix_expression PLUS_PLUS
   18                   | • postfix_expression MINUS_MINUS
   19                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list RT_BRACE
   20                   | • LF_PRNTH type_name RT_PRNTH LF_BRACE initializer_list COMMA RT_BRACE
   25 unary_expression: • postfix_expression
   26                 | • PLUS_PLUS unary_expression
   27                 | • MINUS_MINUS unary_expression
   28                 | • unary_operator cast_expression
   29                 | • SIZEOF unary_expression
   30                 | • SIZEOF LF_PRNTH type_name RT_PRNTH
   31 unary_operator: • AMPRSND
   32               | • ASTERIX
   33               | • PLUS
   34               | • MINUS
   35               | • TILDE
   36               | • EXCLAIM
   37 cast_expression: • unary_expression
   38                | • LF_PRNTH type_name RT_PRNTH cast_expression
   39 multiplicative_expression: • cast_expression
   40                          | • multiplicative_expression ASTERIX cast_expression
   41                          | • multiplicative_expression SLASH cast_expression
   42                          | • multiplicative_expression PRCNT cast_expression
   43 additive_expression: • multiplicative_expression
   44                    | • additive_expression PLUS multiplicative_expression
   45                    | • additive_expression MINUS multiplicative_expression
   46 shift_expression: • additive_expression
   47                 | • shift_expression L_SHFT additive_expression
   48                 | • shift_expression R_SHFT additive_expression
   49 relational_expression: • shift_expression
   50                      | • relational_expression LESS_TH shift_expression
   51                      | • relational_expression MORE_TH shift_expression
   52                      | • relational_expression LESS_EQ shift_expression
   53                      | • relational_expression MORE_EQ shift_expression
   54 equality_expression: • relational_expression
   55                    | • equality_expression EQ_EQ relational_expression
   56                    | • equality_expression NOT_EQ relational_expression
   57 AND_expression: • equality_expression
   58               | • AND_expression AMPRSND equality_expression
   59 exclusive_OR_expression: • AND_expression
   60                        | • exclusive_OR_expression CAP AND_expression
   61 inclusive_OR_expression: • exclusive_OR_expression
   62                        | • inclusive_OR_expression PIPE exclusive_OR_expression
   63 logical_AND_expression: • inclusive_OR_expression
   64                       | • logical_AND_expression AND_AND marker_M inclusive_OR_expression
   65 logical_OR_expression: • logical_AND_expression
   66                      | • logical_OR_expression OR_OR marker_M logical_AND_expression
   67 conditional_expression: • logical_OR_expression
   68                       | • logical_OR_expression guard_N Q_MARK marker_M expression guard_N COLON marker_M conditional_expression
   69 assignment_expression: • conditional_expression
   70                      | • unary_expression assignment_operator assignment_expression
   82 expression: • assignment_expression
   83           | • expression COMMA assignment_expression
  173 statement: • labeled_statement
  174          | • compound_statement
  175          | • expression_statement
  176          | • selection_statement
  177          | • iteration_statement
  178          | • jump_statement
  179 labeled_statement: • IDENTIFIER COLON statement
  180                  | • CASE constant_expression COLON statement
  181                  | • DEFAULT COLON statement
  182 compound_statement: • LF_BRACE enter_block block_item_list_opt RT_BRACE
  189 expression_statement: • expression_opt SEMICOLON
  190 expression_opt: • expression
  191               | ε •  [SEMICOLON]
  192 selection_statement: • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N
  193                    | • IF LF_PRNTH expression RT_PRNTH marker_M statement guard_N ELSE marker_M statement
  194                    | • SWITCH LF_PRNTH expression RT_PRNTH statement
  195 iteration_statement: • WHILE marker_M LF_PRNTH expression RT_PRNTH marker_M statement
  196                    | • DO marker_M statement marker_M WHILE LF_PRNTH expression RT_PRNTH SEMICOLON
  197                    | • FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement
  197                    | FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M • statement
  198                    | • FOR LF_PRNTH declaration expression_opt SEMICOLON expression_opt RT_PRNTH statement
  199 jump_statement: • GOTO IDENTIFIER SEMICOLON
  200               | • CONTINUE SEMICOLON
  201               | • BREAK SEMICOLON
  202               | • RETURN expression SEMICOLON
  203               | • RETURN SEMICOLON

    IDENTIFIER          shift, and go to state 248
    INTEGER_CONSTANT    shift, and go to state 70
    FLOATING_CONSTANT   shift, and go to state 71
    CHARACTER_CONSTANT  shift, and go to state 72
    STRING_LITERAL      shift, and go to state 73
    BREAK               shift, and go to state 249
    RETURN              shift, and go to state 250
    CASE                shift, and go to state 251
    FOR                 shift, and go to state 252
    WHILE               shift, and go to state 253
    GOTO                shift, and go to state 254
    SIZEOF              shift, and go to state 74
    CONTINUE            shift, and go to state 255
    IF                  shift, and go to state 256
    DEFAULT             shift, and go to state 257
    DO                  shift, and go to state 258
    SWITCH              shift, and go to state 259
    LF_PRNTH            shift, and go to state 75
    LF_BRACE            shift, and go to state 260
    PLUS_PLUS           shift, and go to state 77
    MINUS_MINUS         shift, and go to state 78
    AMPRSND             shift, and go to state 79
    ASTERIX             shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAIM             shift, and go to state 84

    $default  reduce using rule 191 (expression_opt)

    primary_expression         go to state 85
    postfix_expression         go to state 86
    unary_expression           go to state 87
    unary_operator             go to state 88
    cast_expression            go to state 89
    multiplicative_expression  go to state 90
    additive_expression        go to state 91
    shift_expression           go to state 92
    relational_expression      go to state 93
    equality_expression        go to state 94
    AND_expression             go to state 95
    exclusive_OR_expression    go to state 96
    inclusive_OR_expression    go to state 97
    logical_AND_expression     go to state 98
    logical_OR_expression      go to state 99
    conditional_expression     go to state 100
    assignment_expression      go to state 113
    expression                 go to state 261
    statement                  go to state 361
    labeled_statement          go to state 264
    compound_statement         go to state 265
    expression_statement       go to state 269
    expression_opt             go to state 270
    selection_statement        go to state 271
    iteration_statement        go to state 272
    jump_statement             go to state 273


State 361

  197 iteration_statement: FOR LF_PRNTH expression_opt SEMICOLON marker_M expression_opt SEMICOLON marker_M expression_opt guard_N RT_PRNTH marker_M statement •

    $default  reduce using rule 197 (iteration_statement)
